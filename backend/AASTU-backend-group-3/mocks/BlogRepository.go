// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	domain "group3-blogApi/domain"
)

// BlogRepository is an autogenerated mock type for the BlogRepository type
type BlogRepository struct {
	mock.Mock
}

// CreateBlog provides a mock function with given fields: username, userID, blog
func (_m *BlogRepository) CreateBlog(username string, userID string, blog domain.Blog) (domain.Blog, error) {
	ret := _m.Called(username, userID, blog)

	if len(ret) == 0 {
		panic("no return value specified for CreateBlog")
	}

	var r0 domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, domain.Blog) (domain.Blog, error)); ok {
		return rf(username, userID, blog)
	}
	if rf, ok := ret.Get(0).(func(string, string, domain.Blog) domain.Blog); ok {
		r0 = rf(username, userID, blog)
	} else {
		r0 = ret.Get(0).(domain.Blog)
	}

	if rf, ok := ret.Get(1).(func(string, string, domain.Blog) error); ok {
		r1 = rf(username, userID, blog)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBlog provides a mock function with given fields: id
func (_m *BlogRepository) DeleteBlog(id string) (domain.Blog, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBlog")
	}

	var r0 domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.Blog, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) domain.Blog); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Blog)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlogByID provides a mock function with given fields: id
func (_m *BlogRepository) GetBlogByID(id string) (domain.Blog, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetBlogByID")
	}

	var r0 domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.Blog, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) domain.Blog); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Blog)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlogs provides a mock function with given fields: page, limit, sortBy, tag, authorName
func (_m *BlogRepository) GetBlogs(page int64, limit int64, sortBy string, tag string, authorName string) ([]domain.Blog, error) {
	ret := _m.Called(page, limit, sortBy, tag, authorName)

	if len(ret) == 0 {
		panic("no return value specified for GetBlogs")
	}

	var r0 []domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64, string, string, string) ([]domain.Blog, error)); ok {
		return rf(page, limit, sortBy, tag, authorName)
	}
	if rf, ok := ret.Get(0).(func(int64, int64, string, string, string) []domain.Blog); ok {
		r0 = rf(page, limit, sortBy, tag, authorName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64, string, string, string) error); ok {
		r1 = rf(page, limit, sortBy, tag, authorName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserBlogs provides a mock function with given fields: userID
func (_m *BlogRepository) GetUserBlogs(userID string) ([]domain.Blog, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserBlogs")
	}

	var r0 []domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]domain.Blog, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []domain.Blog); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBlog provides a mock function with given fields: blog, blogId
func (_m *BlogRepository) UpdateBlog(blog domain.Blog, blogId string) (domain.Blog, error) {
	ret := _m.Called(blog, blogId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBlog")
	}

	var r0 domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Blog, string) (domain.Blog, error)); ok {
		return rf(blog, blogId)
	}
	if rf, ok := ret.Get(0).(func(domain.Blog, string) domain.Blog); ok {
		r0 = rf(blog, blogId)
	} else {
		r0 = ret.Get(0).(domain.Blog)
	}

	if rf, ok := ret.Get(1).(func(domain.Blog, string) error); ok {
		r1 = rf(blog, blogId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBlogRepository creates a new instance of BlogRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlogRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlogRepository {
	mock := &BlogRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
