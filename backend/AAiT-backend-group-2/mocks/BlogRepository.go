// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "AAiT-backend-group-2/Domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// BlogRepository is an autogenerated mock type for the BlogRepository type
type BlogRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *BlogRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Filter provides a mock function with given fields: ctx, tags, startDate, endDate, sortBy
func (_m *BlogRepository) Filter(ctx context.Context, tags []string, startDate string, endDate string, sortBy string) ([]domain.Blog, error) {
	ret := _m.Called(ctx, tags, startDate, endDate, sortBy)

	if len(ret) == 0 {
		panic("no return value specified for Filter")
	}

	var r0 []domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, string, string, string) ([]domain.Blog, error)); ok {
		return rf(ctx, tags, startDate, endDate, sortBy)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, string, string, string) []domain.Blog); ok {
		r0 = rf(ctx, tags, startDate, endDate, sortBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, string, string, string) error); ok {
		r1 = rf(ctx, tags, startDate, endDate, sortBy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: ctx, page, pageSize, sortBy, sortOrder
func (_m *BlogRepository) FindAll(ctx context.Context, page int, pageSize int, sortBy string, sortOrder string) ([]domain.Blog, int, error) {
	ret := _m.Called(ctx, page, pageSize, sortBy, sortOrder)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []domain.Blog
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string, string) ([]domain.Blog, int, error)); ok {
		return rf(ctx, page, pageSize, sortBy, sortOrder)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string, string) []domain.Blog); ok {
		r0 = rf(ctx, page, pageSize, sortBy, sortOrder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, string, string) int); ok {
		r1 = rf(ctx, page, pageSize, sortBy, sortOrder)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int, string, string) error); ok {
		r2 = rf(ctx, page, pageSize, sortBy, sortOrder)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *BlogRepository) FindByID(ctx context.Context, id string) (*domain.Blog, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Blog, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Blog); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, blog
func (_m *BlogRepository) Save(ctx context.Context, blog *domain.Blog) error {
	ret := _m.Called(ctx, blog)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Blog) error); ok {
		r0 = rf(ctx, blog)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, blog
func (_m *BlogRepository) Update(ctx context.Context, blog *domain.Blog) error {
	ret := _m.Called(ctx, blog)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Blog) error); ok {
		r0 = rf(ctx, blog)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBlogRepository creates a new instance of BlogRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlogRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlogRepository {
	mock := &BlogRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
