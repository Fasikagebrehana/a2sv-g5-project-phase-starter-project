// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	domain "Blog_Starter/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// LikeUseCase is an autogenerated mock type for the LikeUseCase type
type LikeUseCase struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: c, userID, blogID
func (_m *LikeUseCase) GetByID(c context.Context, userID string, blogID string) (*domain.Like, error) {
	ret := _m.Called(c, userID, blogID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.Like
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*domain.Like, error)); ok {
		return rf(c, userID, blogID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.Like); ok {
		r0 = rf(c, userID, blogID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Like)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(c, userID, blogID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LikeBlog provides a mock function with given fields: c, like
func (_m *LikeUseCase) LikeBlog(c context.Context, like *domain.Like) (*domain.Like, error) {
	ret := _m.Called(c, like)

	if len(ret) == 0 {
		panic("no return value specified for LikeBlog")
	}

	var r0 *domain.Like
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Like) (*domain.Like, error)); ok {
		return rf(c, like)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Like) *domain.Like); ok {
		r0 = rf(c, like)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Like)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Like) error); ok {
		r1 = rf(c, like)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnlikeBlog provides a mock function with given fields: c, likeID
func (_m *LikeUseCase) UnlikeBlog(c context.Context, likeID string) (*domain.Like, error) {
	ret := _m.Called(c, likeID)

	if len(ret) == 0 {
		panic("no return value specified for UnlikeBlog")
	}

	var r0 *domain.Like
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Like, error)); ok {
		return rf(c, likeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Like); ok {
		r0 = rf(c, likeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Like)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, likeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLikeUseCase creates a new instance of LikeUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLikeUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *LikeUseCase {
	mock := &LikeUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
