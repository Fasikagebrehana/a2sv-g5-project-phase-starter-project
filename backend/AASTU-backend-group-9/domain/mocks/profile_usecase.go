// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "blog/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// ProfileUsecase is an autogenerated mock type for the ProfileUsecase type
type ProfileUsecase struct {
	mock.Mock
}

// UpdateProfile provides a mock function with given fields: c, profile, userid
func (_m *ProfileUsecase) UpdateProfile(c context.Context, profile *domain.Profile, userid primitive.ObjectID) (*domain.ProfileResponse, error) {
	ret := _m.Called(c, profile, userid)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 *domain.ProfileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Profile, primitive.ObjectID) (*domain.ProfileResponse, error)); ok {
		return rf(c, profile, userid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Profile, primitive.ObjectID) *domain.ProfileResponse); ok {
		r0 = rf(c, profile, userid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProfileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Profile, primitive.ObjectID) error); ok {
		r1 = rf(c, profile, userid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProfileUsecase creates a new instance of ProfileUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProfileUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProfileUsecase {
	mock := &ProfileUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
