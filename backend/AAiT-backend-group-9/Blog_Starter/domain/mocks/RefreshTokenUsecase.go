// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	domain "Blog_Starter/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// RefreshTokenUsecase is an autogenerated mock type for the RefreshTokenUsecase type
type RefreshTokenUsecase struct {
	mock.Mock
}

// CheckRefreshToken provides a mock function with given fields: ctx, userID, refreshToken
func (_m *RefreshTokenUsecase) CheckRefreshToken(ctx context.Context, userID string, refreshToken string) error {
	ret := _m.Called(ctx, userID, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for CheckRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTokens provides a mock function with given fields: ctx, userID
func (_m *RefreshTokenUsecase) UpdateTokens(ctx context.Context, userID string) (*domain.RefreshTokenResponse, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTokens")
	}

	var r0 *domain.RefreshTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.RefreshTokenResponse, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.RefreshTokenResponse); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.RefreshTokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRefreshTokenUsecase creates a new instance of RefreshTokenUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRefreshTokenUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *RefreshTokenUsecase {
	mock := &RefreshTokenUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
