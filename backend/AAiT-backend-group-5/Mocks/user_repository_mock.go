// Code generated by MockGen. DO NOT EDIT.
// Source: Domain/Interfaces/user_repository_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	Models "github.com/aait.backend.g5.main/backend/Domain/Models"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(ctx context.Context, user Models.User) *Models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(*Models.ErrorResponse)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), ctx, user)
}

// DeleteTokensFromDB mocks base method.
func (m *MockUserRepository) DeleteTokensFromDB(ctx context.Context, userID string) *Models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTokensFromDB", ctx, userID)
	ret0, _ := ret[0].(*Models.ErrorResponse)
	return ret0
}

// DeleteTokensFromDB indicates an expected call of DeleteTokensFromDB.
func (mr *MockUserRepositoryMockRecorder) DeleteTokensFromDB(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTokensFromDB", reflect.TypeOf((*MockUserRepository)(nil).DeleteTokensFromDB), ctx, userID)
}

// DeleteUser mocks base method.
func (m *MockUserRepository) DeleteUser(ctx context.Context, userID string) *Models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userID)
	ret0, _ := ret[0].(*Models.ErrorResponse)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserRepositoryMockRecorder) DeleteUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserRepository)(nil).DeleteUser), ctx, userID)
}

// DemoteUser mocks base method.
func (m *MockUserRepository) DemoteUser(ctx context.Context, userID string) *Models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DemoteUser", ctx, userID)
	ret0, _ := ret[0].(*Models.ErrorResponse)
	return ret0
}

// DemoteUser indicates an expected call of DemoteUser.
func (mr *MockUserRepositoryMockRecorder) DemoteUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DemoteUser", reflect.TypeOf((*MockUserRepository)(nil).DemoteUser), ctx, userID)
}

// GetUserByEmailOrUsername mocks base method.
func (m *MockUserRepository) GetUserByEmailOrUsername(ctx context.Context, username, email string) (*Models.User, *Models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmailOrUsername", ctx, username, email)
	ret0, _ := ret[0].(*Models.User)
	ret1, _ := ret[1].(*Models.ErrorResponse)
	return ret0, ret1
}

// GetUserByEmailOrUsername indicates an expected call of GetUserByEmailOrUsername.
func (mr *MockUserRepositoryMockRecorder) GetUserByEmailOrUsername(ctx, username, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmailOrUsername", reflect.TypeOf((*MockUserRepository)(nil).GetUserByEmailOrUsername), ctx, username, email)
}

// GetUserByID mocks base method.
func (m *MockUserRepository) GetUserByID(ctx context.Context, id string) (*Models.User, *Models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*Models.User)
	ret1, _ := ret[1].(*Models.ErrorResponse)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserRepositoryMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserRepository)(nil).GetUserByID), ctx, id)
}

// PromoteUser mocks base method.
func (m *MockUserRepository) PromoteUser(ctx context.Context, userID string) *Models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromoteUser", ctx, userID)
	ret0, _ := ret[0].(*Models.ErrorResponse)
	return ret0
}

// PromoteUser indicates an expected call of PromoteUser.
func (mr *MockUserRepositoryMockRecorder) PromoteUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromoteUser", reflect.TypeOf((*MockUserRepository)(nil).PromoteUser), ctx, userID)
}

// StoreAccessToken mocks base method.
func (m *MockUserRepository) StoreAccessToken(ctx context.Context, userID, token string) *Models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreAccessToken", ctx, userID, token)
	ret0, _ := ret[0].(*Models.ErrorResponse)
	return ret0
}

// StoreAccessToken indicates an expected call of StoreAccessToken.
func (mr *MockUserRepositoryMockRecorder) StoreAccessToken(ctx, userID, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreAccessToken", reflect.TypeOf((*MockUserRepository)(nil).StoreAccessToken), ctx, userID, token)
}

// StoreRefreshToken mocks base method.
func (m *MockUserRepository) StoreRefreshToken(ctx context.Context, userID, token string) *Models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRefreshToken", ctx, userID, token)
	ret0, _ := ret[0].(*Models.ErrorResponse)
	return ret0
}

// StoreRefreshToken indicates an expected call of StoreRefreshToken.
func (mr *MockUserRepositoryMockRecorder) StoreRefreshToken(ctx, userID, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRefreshToken", reflect.TypeOf((*MockUserRepository)(nil).StoreRefreshToken), ctx, userID, token)
}

// UpdateUser mocks base method.
func (m *MockUserRepository) UpdateUser(ctx context.Context, user *Models.User, id string) *Models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user, id)
	ret0, _ := ret[0].(*Models.ErrorResponse)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepositoryMockRecorder) UpdateUser(ctx, user, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepository)(nil).UpdateUser), ctx, user, id)
}
