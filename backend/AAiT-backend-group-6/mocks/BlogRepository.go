// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	domain "AAiT-backend-group-6/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// BlogRepository is an autogenerated mock type for the BlogRepository type
type BlogRepository struct {
	mock.Mock
}

// CommentBlog provides a mock function with given fields: c, blogID, comment
func (_m *BlogRepository) CommentBlog(c context.Context, blogID string, comment *domain.Comment) error {
	ret := _m.Called(c, blogID, comment)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.Comment) error); ok {
		r0 = rf(c, blogID, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateBlog provides a mock function with given fields: c, blog
func (_m *BlogRepository) CreateBlog(c context.Context, blog *domain.Blog) (domain.Blog, error) {
	ret := _m.Called(c, blog)

	var r0 domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Blog) (domain.Blog, error)); ok {
		return rf(c, blog)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Blog) domain.Blog); ok {
		r0 = rf(c, blog)
	} else {
		r0 = ret.Get(0).(domain.Blog)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Blog) error); ok {
		r1 = rf(c, blog)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBlog provides a mock function with given fields: c, id
func (_m *BlogRepository) DeleteBlog(c context.Context, id string) error {
	ret := _m.Called(c, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBlog provides a mock function with given fields: c, id
func (_m *BlogRepository) GetBlog(c context.Context, id string) (*domain.Blog, error) {
	ret := _m.Called(c, id)

	var r0 *domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Blog, error)); ok {
		return rf(c, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Blog); ok {
		r0 = rf(c, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlogs provides a mock function with given fields: c, pagination
func (_m *BlogRepository) GetBlogs(c context.Context, pagination *domain.Pagination) ([]*domain.Blog, error) {
	ret := _m.Called(c, pagination)

	var r0 []*domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Pagination) ([]*domain.Blog, error)); ok {
		return rf(c, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Pagination) []*domain.Blog); ok {
		r0 = rf(c, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Pagination) error); ok {
		r1 = rf(c, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LikeBlog provides a mock function with given fields: c, blogID, userID
func (_m *BlogRepository) LikeBlog(c context.Context, blogID string, userID string) error {
	ret := _m.Called(c, blogID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(c, blogID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnlikeBlog provides a mock function with given fields: c, blogID, userID
func (_m *BlogRepository) UnlikeBlog(c context.Context, blogID string, userID string) error {
	ret := _m.Called(c, blogID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(c, blogID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBlog provides a mock function with given fields: c, blog
func (_m *BlogRepository) UpdateBlog(c context.Context, blog *domain.Blog) error {
	ret := _m.Called(c, blog)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Blog) error); ok {
		r0 = rf(c, blog)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewBlogRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewBlogRepository creates a new instance of BlogRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBlogRepository(t mockConstructorTestingTNewBlogRepository) *BlogRepository {
	mock := &BlogRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
