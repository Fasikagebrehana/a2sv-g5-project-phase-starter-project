// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "blog_g2/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// CommentUsecase is an autogenerated mock type for the CommentUsecase type
type CommentUsecase struct {
	mock.Mock
}

// CreateComment provides a mock function with given fields: ctx, BlogID, userID, comment
func (_m *CommentUsecase) CreateComment(ctx context.Context, BlogID string, userID string, comment domain.Comment) *domain.AppError {
	ret := _m.Called(ctx, BlogID, userID, comment)

	if len(ret) == 0 {
		panic("no return value specified for CreateComment")
	}

	var r0 *domain.AppError
	if rf, ok := ret.Get(0).(func(context.Context, string, string, domain.Comment) *domain.AppError); ok {
		r0 = rf(ctx, BlogID, userID, comment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AppError)
		}
	}

	return r0
}

// DeleteComment provides a mock function with given fields: ctx, commentID
func (_m *CommentUsecase) DeleteComment(ctx context.Context, commentID string) *domain.AppError {
	ret := _m.Called(ctx, commentID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 *domain.AppError
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.AppError); ok {
		r0 = rf(ctx, commentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AppError)
		}
	}

	return r0
}

// GetComments provides a mock function with given fields: ctx, BlogID
func (_m *CommentUsecase) GetComments(ctx context.Context, BlogID string) ([]domain.Comment, *domain.AppError) {
	ret := _m.Called(ctx, BlogID)

	if len(ret) == 0 {
		panic("no return value specified for GetComments")
	}

	var r0 []domain.Comment
	var r1 *domain.AppError
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]domain.Comment, *domain.AppError)); ok {
		return rf(ctx, BlogID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.Comment); ok {
		r0 = rf(ctx, BlogID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) *domain.AppError); ok {
		r1 = rf(ctx, BlogID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.AppError)
		}
	}

	return r0, r1
}

// UpdateComment provides a mock function with given fields: ctx, commentID, comment
func (_m *CommentUsecase) UpdateComment(ctx context.Context, commentID string, comment domain.Comment) *domain.AppError {
	ret := _m.Called(ctx, commentID, comment)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComment")
	}

	var r0 *domain.AppError
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Comment) *domain.AppError); ok {
		r0 = rf(ctx, commentID, comment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AppError)
		}
	}

	return r0
}

// NewCommentUsecase creates a new instance of CommentUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommentUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommentUsecase {
	mock := &CommentUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
