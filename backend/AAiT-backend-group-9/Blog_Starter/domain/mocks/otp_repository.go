// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	domain "Blog_Starter/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// OtpRepository is an autogenerated mock type for the OtpRepository type
type OtpRepository struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: c, id
func (_m *OtpRepository) GetByID(c context.Context, id string) (domain.Otp, error) {
	ret := _m.Called(c, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 domain.Otp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Otp, error)); ok {
		return rf(c, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Otp); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Get(0).(domain.Otp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOtpByEmail provides a mock function with given fields: c, email
func (_m *OtpRepository) GetOtpByEmail(c context.Context, email string) (domain.Otp, error) {
	ret := _m.Called(c, email)

	if len(ret) == 0 {
		panic("no return value specified for GetOtpByEmail")
	}

	var r0 domain.Otp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Otp, error)); ok {
		return rf(c, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Otp); ok {
		r0 = rf(c, email)
	} else {
		r0 = ret.Get(0).(domain.Otp)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvalidateOtp provides a mock function with given fields: c, otp
func (_m *OtpRepository) InvalidateOtp(c context.Context, otp *domain.Otp) error {
	ret := _m.Called(c, otp)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateOtp")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Otp) error); ok {
		r0 = rf(c, otp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveOtp provides a mock function with given fields: c, otp
func (_m *OtpRepository) SaveOtp(c context.Context, otp *domain.Otp) error {
	ret := _m.Called(c, otp)

	if len(ret) == 0 {
		panic("no return value specified for SaveOtp")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Otp) error); ok {
		r0 = rf(c, otp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOtpRepository creates a new instance of OtpRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOtpRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OtpRepository {
	mock := &OtpRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
