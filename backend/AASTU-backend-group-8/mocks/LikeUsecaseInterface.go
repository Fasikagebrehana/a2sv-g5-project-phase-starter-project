// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "meleket/domain"

	mock "github.com/stretchr/testify/mock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// LikeUsecaseInterface is an autogenerated mock type for the LikeUsecaseInterface type
type LikeUsecaseInterface struct {
	mock.Mock
}

// AddLike provides a mock function with given fields: blogID, userID
func (_m *LikeUsecaseInterface) AddLike(blogID primitive.ObjectID, userID primitive.ObjectID) error {
	ret := _m.Called(blogID, userID)

	if len(ret) == 0 {
		panic("no return value specified for AddLike")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, primitive.ObjectID) error); ok {
		r0 = rf(blogID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLikesByBlogID provides a mock function with given fields: blogID
func (_m *LikeUsecaseInterface) GetLikesByBlogID(blogID primitive.ObjectID) ([]domain.Like, error) {
	ret := _m.Called(blogID)

	if len(ret) == 0 {
		panic("no return value specified for GetLikesByBlogID")
	}

	var r0 []domain.Like
	var r1 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) ([]domain.Like, error)); ok {
		return rf(blogID)
	}
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) []domain.Like); ok {
		r0 = rf(blogID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Like)
		}
	}

	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(blogID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveLike provides a mock function with given fields: likeID
func (_m *LikeUsecaseInterface) RemoveLike(likeID primitive.ObjectID) error {
	ret := _m.Called(likeID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveLike")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) error); ok {
		r0 = rf(likeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewLikeUsecaseInterface creates a new instance of LikeUsecaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLikeUsecaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *LikeUsecaseInterface {
	mock := &LikeUsecaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
