// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "group3-blogApi/domain"

	mock "github.com/stretchr/testify/mock"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// AccountActivation provides a mock function with given fields: token, email
func (_m *UserUsecase) AccountActivation(token string, email string) error {
	ret := _m.Called(token, email)

	if len(ret) == 0 {
		panic("no return value specified for AccountActivation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(token, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMyAccount provides a mock function with given fields: userID
func (_m *UserUsecase) DeleteMyAccount(userID string) error {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMyAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: userID
func (_m *UserUsecase) DeleteUser(userID string) (domain.User, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.User, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) domain.User); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDevices provides a mock function with given fields: userID
func (_m *UserUsecase) GetDevices(userID string) ([]string, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetDevices")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMyProfile provides a mock function with given fields: userID
func (_m *UserUsecase) GetMyProfile(userID string) (domain.User, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetMyProfile")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.User, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) domain.User); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsernameOrEmail provides a mock function with given fields: username, email
func (_m *UserUsecase) GetUserByUsernameOrEmail(username string, email string) (domain.User, error) {
	ret := _m.Called(username, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsernameOrEmail")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (domain.User, error)); ok {
		return rf(username, email)
	}
	if rf, ok := ret.Get(0).(func(string, string) domain.User); ok {
		r0 = rf(username, email)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields:
func (_m *UserUsecase) GetUsers() ([]domain.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: user, deviceID
func (_m *UserUsecase) Login(user *domain.User, deviceID string) (domain.LogInResponse, error) {
	ret := _m.Called(user, deviceID)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 domain.LogInResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.User, string) (domain.LogInResponse, error)); ok {
		return rf(user, deviceID)
	}
	if rf, ok := ret.Get(0).(func(*domain.User, string) domain.LogInResponse); ok {
		r0 = rf(user, deviceID)
	} else {
		r0 = ret.Get(0).(domain.LogInResponse)
	}

	if rf, ok := ret.Get(1).(func(*domain.User, string) error); ok {
		r1 = rf(user, deviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: userID, deviceID, token
func (_m *UserUsecase) Logout(userID string, deviceID string, token string) error {
	ret := _m.Called(userID, deviceID, token)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(userID, deviceID, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogoutAllDevices provides a mock function with given fields: userID
func (_m *UserUsecase) LogoutAllDevices(userID string) error {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for LogoutAllDevices")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogoutDevice provides a mock function with given fields: userID, deviceID
func (_m *UserUsecase) LogoutDevice(userID string, deviceID string) error {
	ret := _m.Called(userID, deviceID)

	if len(ret) == 0 {
		panic("no return value specified for LogoutDevice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userID, deviceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OAuthLogin provides a mock function with given fields: oauthUserInfo, deviceID
func (_m *UserUsecase) OAuthLogin(oauthUserInfo domain.OAuthUserInfo, deviceID string) (domain.LogInResponse, error) {
	ret := _m.Called(oauthUserInfo, deviceID)

	if len(ret) == 0 {
		panic("no return value specified for OAuthLogin")
	}

	var r0 domain.LogInResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.OAuthUserInfo, string) (domain.LogInResponse, error)); ok {
		return rf(oauthUserInfo, deviceID)
	}
	if rf, ok := ret.Get(0).(func(domain.OAuthUserInfo, string) domain.LogInResponse); ok {
		r0 = rf(oauthUserInfo, deviceID)
	} else {
		r0 = ret.Get(0).(domain.LogInResponse)
	}

	if rf, ok := ret.Get(1).(func(domain.OAuthUserInfo, string) error); ok {
		r1 = rf(oauthUserInfo, deviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshToken provides a mock function with given fields: userID, deviceID, token
func (_m *UserUsecase) RefreshToken(userID string, deviceID string, token string) (domain.LogInResponse, error) {
	ret := _m.Called(userID, deviceID, token)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 domain.LogInResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (domain.LogInResponse, error)); ok {
		return rf(userID, deviceID, token)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) domain.LogInResponse); ok {
		r0 = rf(userID, deviceID, token)
	} else {
		r0 = ret.Get(0).(domain.LogInResponse)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(userID, deviceID, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: user
func (_m *UserUsecase) Register(user domain.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResetPassword provides a mock function with given fields: token, newPassword
func (_m *UserUsecase) ResetPassword(token string, newPassword string) error {
	ret := _m.Called(token, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(token, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendPasswordResetLink provides a mock function with given fields: email
func (_m *UserUsecase) SendPasswordResetLink(email string) error {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for SendPasswordResetLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMyProfile provides a mock function with given fields: user, UserID
func (_m *UserUsecase) UpdateMyProfile(user domain.User, UserID string) error {
	ret := _m.Called(user, UserID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMyProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.User, string) error); ok {
		r0 = rf(user, UserID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserRole provides a mock function with given fields: userID, role
func (_m *UserUsecase) UpdateUserRole(userID string, role string) (domain.User, error) {
	ret := _m.Called(userID, role)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserRole")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (domain.User, error)); ok {
		return rf(userID, role)
	}
	if rf, ok := ret.Get(0).(func(string, string) domain.User); ok {
		r0 = rf(userID, role)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userID, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadImage provides a mock function with given fields: userID, imagePath
func (_m *UserUsecase) UploadImage(userID string, imagePath string) error {
	ret := _m.Called(userID, imagePath)

	if len(ret) == 0 {
		panic("no return value specified for UploadImage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userID, imagePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
