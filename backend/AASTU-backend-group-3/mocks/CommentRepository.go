// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	domain "group3-blogApi/domain"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// CommentRepository is an autogenerated mock type for the CommentRepository type
type CommentRepository struct {
	mock.Mock
}

// CreateComment provides a mock function with given fields: comment
func (_m *CommentRepository) CreateComment(comment *domain.Comment) (*domain.Comment, error) {
	ret := _m.Called(comment)

	if len(ret) == 0 {
		panic("no return value specified for CreateComment")
	}

	var r0 *domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Comment) (*domain.Comment, error)); ok {
		return rf(comment)
	}
	if rf, ok := ret.Get(0).(func(*domain.Comment) *domain.Comment); ok {
		r0 = rf(comment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Comment) error); ok {
		r1 = rf(comment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReply provides a mock function with given fields: reply
func (_m *CommentRepository) CreateReply(reply *domain.Reply) (*domain.Reply, error) {
	ret := _m.Called(reply)

	if len(ret) == 0 {
		panic("no return value specified for CreateReply")
	}

	var r0 *domain.Reply
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Reply) (*domain.Reply, error)); ok {
		return rf(reply)
	}
	if rf, ok := ret.Get(0).(func(*domain.Reply) *domain.Reply); ok {
		r0 = rf(reply)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Reply)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Reply) error); ok {
		r1 = rf(reply)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteComment provides a mock function with given fields: id
func (_m *CommentRepository) DeleteComment(id primitive.ObjectID) (*domain.Comment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 *domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) (*domain.Comment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) *domain.Comment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReply provides a mock function with given fields: id
func (_m *CommentRepository) DeleteReply(id primitive.ObjectID) (*domain.Reply, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReply")
	}

	var r0 *domain.Reply
	var r1 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) (*domain.Reply, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) *domain.Reply); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Reply)
		}
	}

	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommentByID provides a mock function with given fields: id
func (_m *CommentRepository) GetCommentByID(id primitive.ObjectID) (*domain.Comment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetCommentByID")
	}

	var r0 *domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) (*domain.Comment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) *domain.Comment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommentsByPostID provides a mock function with given fields: postID, page, limit
func (_m *CommentRepository) GetCommentsByPostID(postID string, page int64, limit int64) ([]*domain.Comment, error) {
	ret := _m.Called(postID, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetCommentsByPostID")
	}

	var r0 []*domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int64, int64) ([]*domain.Comment, error)); ok {
		return rf(postID, page, limit)
	}
	if rf, ok := ret.Get(0).(func(string, int64, int64) []*domain.Comment); ok {
		r0 = rf(postID, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int64, int64) error); ok {
		r1 = rf(postID, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRepliesByCommentID provides a mock function with given fields: commentID, page, limit
func (_m *CommentRepository) GetRepliesByCommentID(commentID string, page int64, limit int64) ([]*domain.Reply, error) {
	ret := _m.Called(commentID, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetRepliesByCommentID")
	}

	var r0 []*domain.Reply
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int64, int64) ([]*domain.Reply, error)); ok {
		return rf(commentID, page, limit)
	}
	if rf, ok := ret.Get(0).(func(string, int64, int64) []*domain.Reply); ok {
		r0 = rf(commentID, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Reply)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int64, int64) error); ok {
		r1 = rf(commentID, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReplyByID provides a mock function with given fields: id
func (_m *CommentRepository) GetReplyByID(id primitive.ObjectID) (*domain.Reply, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetReplyByID")
	}

	var r0 *domain.Reply
	var r1 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) (*domain.Reply, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) *domain.Reply); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Reply)
		}
	}

	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LikeComment provides a mock function with given fields: commentID, userID
func (_m *CommentRepository) LikeComment(commentID primitive.ObjectID, userID string) error {
	ret := _m.Called(commentID, userID)

	if len(ret) == 0 {
		panic("no return value specified for LikeComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, string) error); ok {
		r0 = rf(commentID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LikeReply provides a mock function with given fields: replyID, userID
func (_m *CommentRepository) LikeReply(replyID primitive.ObjectID, userID string) error {
	ret := _m.Called(replyID, userID)

	if len(ret) == 0 {
		panic("no return value specified for LikeReply")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, string) error); ok {
		r0 = rf(replyID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnlikeComment provides a mock function with given fields: commentID, userID
func (_m *CommentRepository) UnlikeComment(commentID primitive.ObjectID, userID string) error {
	ret := _m.Called(commentID, userID)

	if len(ret) == 0 {
		panic("no return value specified for UnlikeComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, string) error); ok {
		r0 = rf(commentID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnlikeReply provides a mock function with given fields: replyID, userID
func (_m *CommentRepository) UnlikeReply(replyID primitive.ObjectID, userID string) error {
	ret := _m.Called(replyID, userID)

	if len(ret) == 0 {
		panic("no return value specified for UnlikeReply")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, string) error); ok {
		r0 = rf(replyID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateComment provides a mock function with given fields: comment
func (_m *CommentRepository) UpdateComment(comment *domain.Comment) (*domain.Comment, error) {
	ret := _m.Called(comment)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComment")
	}

	var r0 *domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Comment) (*domain.Comment, error)); ok {
		return rf(comment)
	}
	if rf, ok := ret.Get(0).(func(*domain.Comment) *domain.Comment); ok {
		r0 = rf(comment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Comment) error); ok {
		r1 = rf(comment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReply provides a mock function with given fields: reply
func (_m *CommentRepository) UpdateReply(reply *domain.Reply) (*domain.Reply, error) {
	ret := _m.Called(reply)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReply")
	}

	var r0 *domain.Reply
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Reply) (*domain.Reply, error)); ok {
		return rf(reply)
	}
	if rf, ok := ret.Get(0).(func(*domain.Reply) *domain.Reply); ok {
		r0 = rf(reply)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Reply)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Reply) error); ok {
		r1 = rf(reply)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCommentRepository creates a new instance of CommentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommentRepository {
	mock := &CommentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
