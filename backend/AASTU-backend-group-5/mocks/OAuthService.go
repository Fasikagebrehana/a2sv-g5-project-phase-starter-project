// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/RealEskalate/blogpost/domain"
	mock "github.com/stretchr/testify/mock"
)

// OAuthService is an autogenerated mock type for the OAuthService type
type OAuthService struct {
	mock.Mock
}

// GetGoogleLoginURL provides a mock function with given fields: _a0
func (_m *OAuthService) GetGoogleLoginURL(_a0 string) string {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetGoogleLoginURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetState provides a mock function with given fields:
func (_m *OAuthService) GetState() domain.State {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetState")
	}

	var r0 domain.State
	if rf, ok := ret.Get(0).(func() domain.State); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(domain.State)
	}

	return r0
}

// HandleGoogleCallback provides a mock function with given fields: _a0
func (_m *OAuthService) HandleGoogleCallback(_a0 string) (*domain.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for HandleGoogleCallback")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOAuthService creates a new instance of OAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OAuthService {
	mock := &OAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
