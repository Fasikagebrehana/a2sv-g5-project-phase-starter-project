// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ForgotPasswordUsecase is an autogenerated mock type for the ForgotPasswordUsecase type
type ForgotPasswordUsecase struct {
	mock.Mock
}

// ResetPassword provides a mock function with given fields: c, email, otpValue, newPassword
func (_m *ForgotPasswordUsecase) ResetPassword(c context.Context, email string, otpValue string, newPassword string) error {
	ret := _m.Called(c, email, otpValue, newPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(c, email, otpValue, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendResetOTP provides a mock function with given fields: c, email, smtpUsername, smtpPassword
func (_m *ForgotPasswordUsecase) SendResetOTP(c context.Context, email string, smtpUsername string, smtpPassword string) error {
	ret := _m.Called(c, email, smtpUsername, smtpPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(c, email, smtpUsername, smtpPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewForgotPasswordUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewForgotPasswordUsecase creates a new instance of ForgotPasswordUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewForgotPasswordUsecase(t mockConstructorTestingTNewForgotPasswordUsecase) *ForgotPasswordUsecase {
	mock := &ForgotPasswordUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
