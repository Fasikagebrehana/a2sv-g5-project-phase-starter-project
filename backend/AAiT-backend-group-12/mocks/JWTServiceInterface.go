// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	domain "blog_api/domain"

	jwt "github.com/golang-jwt/jwt"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// JWTServiceInterface is an autogenerated mock type for the JWTServiceInterface type
type JWTServiceInterface struct {
	mock.Mock
}

// GetExpiryDate provides a mock function with given fields: token
func (_m *JWTServiceInterface) GetExpiryDate(token *jwt.Token) (time.Time, domain.CodedError) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for GetExpiryDate")
	}

	var r0 time.Time
	var r1 domain.CodedError
	if rf, ok := ret.Get(0).(func(*jwt.Token) (time.Time, domain.CodedError)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token) time.Time); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token) domain.CodedError); ok {
		r1 = rf(token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(domain.CodedError)
		}
	}

	return r0, r1
}

// GetRole provides a mock function with given fields: token
func (_m *JWTServiceInterface) GetRole(token *jwt.Token) (string, domain.CodedError) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for GetRole")
	}

	var r0 string
	var r1 domain.CodedError
	if rf, ok := ret.Get(0).(func(*jwt.Token) (string, domain.CodedError)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token) string); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token) domain.CodedError); ok {
		r1 = rf(token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(domain.CodedError)
		}
	}

	return r0, r1
}

// GetTokenType provides a mock function with given fields: token
func (_m *JWTServiceInterface) GetTokenType(token *jwt.Token) (string, domain.CodedError) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for GetTokenType")
	}

	var r0 string
	var r1 domain.CodedError
	if rf, ok := ret.Get(0).(func(*jwt.Token) (string, domain.CodedError)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token) string); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token) domain.CodedError); ok {
		r1 = rf(token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(domain.CodedError)
		}
	}

	return r0, r1
}

// GetUsername provides a mock function with given fields: token
func (_m *JWTServiceInterface) GetUsername(token *jwt.Token) (string, domain.CodedError) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for GetUsername")
	}

	var r0 string
	var r1 domain.CodedError
	if rf, ok := ret.Get(0).(func(*jwt.Token) (string, domain.CodedError)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token) string); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token) domain.CodedError); ok {
		r1 = rf(token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(domain.CodedError)
		}
	}

	return r0, r1
}

// SignJWTWithPayload provides a mock function with given fields: username, role, tokenType, tokenLifeSpan
func (_m *JWTServiceInterface) SignJWTWithPayload(username string, role string, tokenType string, tokenLifeSpan time.Duration) (string, domain.CodedError) {
	ret := _m.Called(username, role, tokenType, tokenLifeSpan)

	if len(ret) == 0 {
		panic("no return value specified for SignJWTWithPayload")
	}

	var r0 string
	var r1 domain.CodedError
	if rf, ok := ret.Get(0).(func(string, string, string, time.Duration) (string, domain.CodedError)); ok {
		return rf(username, role, tokenType, tokenLifeSpan)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, time.Duration) string); ok {
		r0 = rf(username, role, tokenType, tokenLifeSpan)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, string, time.Duration) domain.CodedError); ok {
		r1 = rf(username, role, tokenType, tokenLifeSpan)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(domain.CodedError)
		}
	}

	return r0, r1
}

// ValidateAndParseToken provides a mock function with given fields: rawToken
func (_m *JWTServiceInterface) ValidateAndParseToken(rawToken string) (*jwt.Token, error) {
	ret := _m.Called(rawToken)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAndParseToken")
	}

	var r0 *jwt.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*jwt.Token, error)); ok {
		return rf(rawToken)
	}
	if rf, ok := ret.Get(0).(func(string) *jwt.Token); ok {
		r0 = rf(rawToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(rawToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewJWTServiceInterface creates a new instance of JWTServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJWTServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *JWTServiceInterface {
	mock := &JWTServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
