// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	domain "blog_api/domain"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// CacheRepositoryInterface is an autogenerated mock type for the CacheRepositoryInterface type
type CacheRepositoryInterface struct {
	mock.Mock
}

// CacheData provides a mock function with given fields: key, value, expiration
func (_m *CacheRepositoryInterface) CacheData(key string, value string, expiration time.Duration) domain.CodedError {
	ret := _m.Called(key, value, expiration)

	if len(ret) == 0 {
		panic("no return value specified for CacheData")
	}

	var r0 domain.CodedError
	if rf, ok := ret.Get(0).(func(string, string, time.Duration) domain.CodedError); ok {
		r0 = rf(key, value, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.CodedError)
		}
	}

	return r0
}

// GetCacheData provides a mock function with given fields: key
func (_m *CacheRepositoryInterface) GetCacheData(key string) (string, domain.CodedError) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetCacheData")
	}

	var r0 string
	var r1 domain.CodedError
	if rf, ok := ret.Get(0).(func(string) (string, domain.CodedError)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) domain.CodedError); ok {
		r1 = rf(key)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(domain.CodedError)
		}
	}

	return r0, r1
}

// IsCached provides a mock function with given fields: key
func (_m *CacheRepositoryInterface) IsCached(key string) bool {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for IsCached")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewCacheRepositoryInterface creates a new instance of CacheRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCacheRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CacheRepositoryInterface {
	mock := &CacheRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
