// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	Domain "AAiT-backend-group-8/Domain"

	mock "github.com/stretchr/testify/mock"
)

// ICommentUseCase is an autogenerated mock type for the ICommentUseCase type
type ICommentUseCase struct {
	mock.Mock
}

// CreateComment provides a mock function with given fields: comment, blogID
func (_m *ICommentUseCase) CreateComment(comment *Domain.Comment, blogID string) error {
	ret := _m.Called(comment, blogID)

	if len(ret) == 0 {
		panic("no return value specified for CreateComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*Domain.Comment, string) error); ok {
		r0 = rf(comment, blogID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DecodeToken provides a mock function with given fields: tokenStr
func (_m *ICommentUseCase) DecodeToken(tokenStr string) (string, string, error) {
	ret := _m.Called(tokenStr)

	if len(ret) == 0 {
		panic("no return value specified for DecodeToken")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (string, string, error)); ok {
		return rf(tokenStr)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(tokenStr)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(tokenStr)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(tokenStr)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteComment provides a mock function with given fields: commentID
func (_m *ICommentUseCase) DeleteComment(commentID string) (string, error) {
	ret := _m.Called(commentID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(commentID)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(commentID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(commentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCommentsOfBlog provides a mock function with given fields: blogID
func (_m *ICommentUseCase) DeleteCommentsOfBlog(blogID string) error {
	ret := _m.Called(blogID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCommentsOfBlog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(blogID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCommentByID provides a mock function with given fields: commentID
func (_m *ICommentUseCase) GetCommentByID(commentID string) (*Domain.Comment, error) {
	ret := _m.Called(commentID)

	if len(ret) == 0 {
		panic("no return value specified for GetCommentByID")
	}

	var r0 *Domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*Domain.Comment, error)); ok {
		return rf(commentID)
	}
	if rf, ok := ret.Get(0).(func(string) *Domain.Comment); ok {
		r0 = rf(commentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(commentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetComments provides a mock function with given fields: blogID
func (_m *ICommentUseCase) GetComments(blogID string) ([]Domain.Comment, error) {
	ret := _m.Called(blogID)

	if len(ret) == 0 {
		panic("no return value specified for GetComments")
	}

	var r0 []Domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]Domain.Comment, error)); ok {
		return rf(blogID)
	}
	if rf, ok := ret.Get(0).(func(string) []Domain.Comment); ok {
		r0 = rf(blogID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(blogID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateComment provides a mock function with given fields: comment, commentID
func (_m *ICommentUseCase) UpdateComment(comment *Domain.Comment, commentID string) (string, error) {
	ret := _m.Called(comment, commentID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComment")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*Domain.Comment, string) (string, error)); ok {
		return rf(comment, commentID)
	}
	if rf, ok := ret.Get(0).(func(*Domain.Comment, string) string); ok {
		r0 = rf(comment, commentID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*Domain.Comment, string) error); ok {
		r1 = rf(comment, commentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewICommentUseCase creates a new instance of ICommentUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICommentUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICommentUseCase {
	mock := &ICommentUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
