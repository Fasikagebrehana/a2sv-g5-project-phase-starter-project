// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "aait-backend-group4/Domain"
	context "context"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// BlogRepository is an autogenerated mock type for the BlogRepository type
type BlogRepository struct {
	mock.Mock
}

// AddComment provides a mock function with given fields: feedback, comment
func (_m *BlogRepository) AddComment(feedback *domain.Feedback, comment domain.Comment) error {
	ret := _m.Called(feedback, comment)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Feedback, domain.Comment) error); ok {
		r0 = rf(feedback, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BlogExists provides a mock function with given fields: ctx, id
func (_m *BlogRepository) BlogExists(ctx context.Context, id primitive.ObjectID) (bool, error) {
	ret := _m.Called(ctx, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBlog provides a mock function with given fields: c, blog
func (_m *BlogRepository) CreateBlog(c context.Context, blog *domain.Blog) error {
	ret := _m.Called(c, blog)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Blog) error); ok {
		r0 = rf(c, blog)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DecrementDislikes provides a mock function with given fields: feedback
func (_m *BlogRepository) DecrementDislikes(feedback *domain.Feedback) error {
	ret := _m.Called(feedback)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Feedback) error); ok {
		r0 = rf(feedback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DecrementLikes provides a mock function with given fields: feedback
func (_m *BlogRepository) DecrementLikes(feedback *domain.Feedback) error {
	ret := _m.Called(feedback)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Feedback) error); ok {
		r0 = rf(feedback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBlog provides a mock function with given fields: ctx, id
func (_m *BlogRepository) DeleteBlog(ctx context.Context, id primitive.ObjectID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchAll provides a mock function with given fields: c, limit, offset
func (_m *BlogRepository) FetchAll(c context.Context, limit int, offset int) ([]domain.Blog, int, error) {
	ret := _m.Called(c, limit, offset)

	var r0 []domain.Blog
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []domain.Blog); ok {
		r0 = rf(c, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Blog)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = rf(c, limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = rf(c, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FetchByBlogAuthor provides a mock function with given fields: c, authorID, limit, offset
func (_m *BlogRepository) FetchByBlogAuthor(c context.Context, authorID string, limit int, offset int) ([]domain.Blog, int, error) {
	ret := _m.Called(c, authorID, limit, offset)

	var r0 []domain.Blog
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []domain.Blog); ok {
		r0 = rf(c, authorID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Blog)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) int); ok {
		r1 = rf(c, authorID, limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = rf(c, authorID, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FetchByBlogID provides a mock function with given fields: c, blogID
func (_m *BlogRepository) FetchByBlogID(c context.Context, blogID string) (domain.Blog, error) {
	ret := _m.Called(c, blogID)

	var r0 domain.Blog
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Blog); ok {
		r0 = rf(c, blogID)
	} else {
		r0 = ret.Get(0).(domain.Blog)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, blogID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchByBlogTitle provides a mock function with given fields: c, title
func (_m *BlogRepository) FetchByBlogTitle(c context.Context, title string) (domain.Blog, error) {
	ret := _m.Called(c, title)

	var r0 domain.Blog
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Blog); ok {
		r0 = rf(c, title)
	} else {
		r0 = ret.Get(0).(domain.Blog)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchByPageAndPopularity provides a mock function with given fields: ctx, limit, offset
func (_m *BlogRepository) FetchByPageAndPopularity(ctx context.Context, limit int, offset int) ([]domain.Blog, int, error) {
	ret := _m.Called(ctx, limit, offset)

	var r0 []domain.Blog
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []domain.Blog); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Blog)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = rf(ctx, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FetchByTags provides a mock function with given fields: ctx, tags, limit, offset
func (_m *BlogRepository) FetchByTags(ctx context.Context, tags []domain.Tag, limit int, offset int) ([]domain.Blog, int, error) {
	ret := _m.Called(ctx, tags, limit, offset)

	var r0 []domain.Blog
	if rf, ok := ret.Get(0).(func(context.Context, []domain.Tag, int, int) []domain.Blog); ok {
		r0 = rf(ctx, tags, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Blog)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, []domain.Tag, int, int) int); ok {
		r1 = rf(ctx, tags, limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, []domain.Tag, int, int) error); ok {
		r2 = rf(ctx, tags, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IncrementDislike provides a mock function with given fields: feedback
func (_m *BlogRepository) IncrementDislike(feedback *domain.Feedback) error {
	ret := _m.Called(feedback)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Feedback) error); ok {
		r0 = rf(feedback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IncrementLikes provides a mock function with given fields: feedback
func (_m *BlogRepository) IncrementLikes(feedback *domain.Feedback) error {
	ret := _m.Called(feedback)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Feedback) error); ok {
		r0 = rf(feedback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveComment provides a mock function with given fields: feedback, requesterUserID, isAdmin
func (_m *BlogRepository) RemoveComment(feedback *domain.Feedback, requesterUserID string, isAdmin bool) error {
	ret := _m.Called(feedback, requesterUserID, isAdmin)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Feedback, string, bool) error); ok {
		r0 = rf(feedback, requesterUserID, isAdmin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchBlogs provides a mock function with given fields: c, filter, limit, offset
func (_m *BlogRepository) SearchBlogs(c context.Context, filter domain.Filter, limit int, offset int) ([]domain.Blog, int, error) {
	ret := _m.Called(c, filter, limit, offset)

	var r0 []domain.Blog
	if rf, ok := ret.Get(0).(func(context.Context, domain.Filter, int, int) []domain.Blog); ok {
		r0 = rf(c, filter, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Blog)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, domain.Filter, int, int) int); ok {
		r1 = rf(c, filter, limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, domain.Filter, int, int) error); ok {
		r2 = rf(c, filter, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateBlog provides a mock function with given fields: ctx, id, blog
func (_m *BlogRepository) UpdateBlog(ctx context.Context, id primitive.ObjectID, blog domain.BlogUpdate) error {
	ret := _m.Called(ctx, id, blog)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, domain.BlogUpdate) error); ok {
		r0 = rf(ctx, id, blog)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateComment provides a mock function with given fields: feedback, updatedComment, userID
func (_m *BlogRepository) UpdateComment(feedback *domain.Feedback, updatedComment domain.Comment, userID string) error {
	ret := _m.Called(feedback, updatedComment, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Feedback, domain.Comment, string) error); ok {
		r0 = rf(feedback, updatedComment, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateFeedback provides a mock function with given fields: ctx, blogID, updateFunc
func (_m *BlogRepository) UpdateFeedback(ctx context.Context, blogID string, updateFunc func(*domain.Feedback) error) error {
	ret := _m.Called(ctx, blogID, updateFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, func(*domain.Feedback) error) error); ok {
		r0 = rf(ctx, blogID, updateFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePopularity provides a mock function with given fields: ctx, id, popularity
func (_m *BlogRepository) UpdatePopularity(ctx context.Context, id primitive.ObjectID, popularity float64) error {
	ret := _m.Called(ctx, id, popularity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, float64) error); ok {
		r0 = rf(ctx, id, popularity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserIsAuthor provides a mock function with given fields: ctx, blogID, userID
func (_m *BlogRepository) UserIsAuthor(ctx context.Context, blogID primitive.ObjectID, userID string) (bool, error) {
	ret := _m.Called(ctx, blogID, userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, string) bool); ok {
		r0 = rf(ctx, blogID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, string) error); ok {
		r1 = rf(ctx, blogID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBlogRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewBlogRepository creates a new instance of BlogRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBlogRepository(t mockConstructorTestingTNewBlogRepository) *BlogRepository {
	mock := &BlogRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
