// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "group3-blogApi/domain"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// AccountActivation provides a mock function with given fields: token, email
func (_m *UserRepository) AccountActivation(token string, email string) error {
	ret := _m.Called(token, email)

	if len(ret) == 0 {
		panic("no return value specified for AccountActivation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(token, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAllRefreshTokens provides a mock function with given fields: user
func (_m *UserRepository) DeleteAllRefreshTokens(user *domain.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllRefreshTokens")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMyAccount provides a mock function with given fields: userID
func (_m *UserRepository) DeleteMyAccount(userID string) error {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMyAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRefreshToken provides a mock function with given fields: user, refreshToken
func (_m *UserRepository) DeleteRefreshToken(user *domain.User, refreshToken string) error {
	ret := _m.Called(user, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.User, string) error); ok {
		r0 = rf(user, refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: userID
func (_m *UserRepository) DeleteUser(userID string) (domain.User, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.User, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) domain.User); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOrCreateUserByGoogleID provides a mock function with given fields: oauthUserInfo, deviceID
func (_m *UserRepository) FindOrCreateUserByGoogleID(oauthUserInfo domain.OAuthUserInfo, deviceID string) (*domain.User, error) {
	ret := _m.Called(oauthUserInfo, deviceID)

	if len(ret) == 0 {
		panic("no return value specified for FindOrCreateUserByGoogleID")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.OAuthUserInfo, string) (*domain.User, error)); ok {
		return rf(oauthUserInfo, deviceID)
	}
	if rf, ok := ret.Get(0).(func(domain.OAuthUserInfo, string) *domain.User); ok {
		r0 = rf(oauthUserInfo, deviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.OAuthUserInfo, string) error); ok {
		r1 = rf(oauthUserInfo, deviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMyProfile provides a mock function with given fields: userID
func (_m *UserRepository) GetMyProfile(userID string) (domain.User, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetMyProfile")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.User, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) domain.User); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: email
func (_m *UserRepository) GetUserByEmail(email string) (domain.User, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) domain.User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: id
func (_m *UserRepository) GetUserByID(id string) (domain.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) domain.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByResetToken provides a mock function with given fields: token
func (_m *UserRepository) GetUserByResetToken(token string) (domain.User, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByResetToken")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.User, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) domain.User); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsernameOrEmail provides a mock function with given fields: username, email
func (_m *UserRepository) GetUserByUsernameOrEmail(username string, email string) (domain.User, error) {
	ret := _m.Called(username, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsernameOrEmail")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (domain.User, error)); ok {
		return rf(username, email)
	}
	if rf, ok := ret.Get(0).(func(string, string) domain.User); ok {
		r0 = rf(username, email)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields:
func (_m *UserRepository) GetUsers() ([]domain.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: user
func (_m *UserRepository) Login(user *domain.User) (*domain.User, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.User) (*domain.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*domain.User) *domain.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: user
func (_m *UserRepository) Register(user domain.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMyProfile provides a mock function with given fields: user, userID
func (_m *UserRepository) UpdateMyProfile(user domain.User, userID string) error {
	ret := _m.Called(user, userID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMyProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.User, string) error); ok {
		r0 = rf(user, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: user
func (_m *UserRepository) UpdateUser(user *domain.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserRole provides a mock function with given fields: userID, role
func (_m *UserRepository) UpdateUserRole(userID string, role string) (domain.User, error) {
	ret := _m.Called(userID, role)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserRole")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (domain.User, error)); ok {
		return rf(userID, role)
	}
	if rf, ok := ret.Get(0).(func(string, string) domain.User); ok {
		r0 = rf(userID, role)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userID, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadImage provides a mock function with given fields: userID, imagePath
func (_m *UserRepository) UploadImage(userID string, imagePath string) error {
	ret := _m.Called(userID, imagePath)

	if len(ret) == 0 {
		panic("no return value specified for UploadImage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userID, imagePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
