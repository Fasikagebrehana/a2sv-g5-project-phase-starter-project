// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "meleket/domain"

	mock "github.com/stretchr/testify/mock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// TokenRepositoryInterface is an autogenerated mock type for the TokenRepositoryInterface type
type TokenRepositoryInterface struct {
	mock.Mock
}

// DeleteRefreshTokenByUserID provides a mock function with given fields: userID
func (_m *TokenRepositoryInterface) DeleteRefreshTokenByUserID(userID primitive.ObjectID) error {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRefreshTokenByUserID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindRefreshToken provides a mock function with given fields: userID
func (_m *TokenRepositoryInterface) FindRefreshToken(userID primitive.ObjectID) (*domain.RefreshToken, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for FindRefreshToken")
	}

	var r0 *domain.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) (*domain.RefreshToken, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) *domain.RefreshToken); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.RefreshToken)
		}
	}

	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveRefreshToken provides a mock function with given fields: refreshToken
func (_m *TokenRepositoryInterface) SaveRefreshToken(refreshToken *domain.RefreshToken) error {
	ret := _m.Called(refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for SaveRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.RefreshToken) error); ok {
		r0 = rf(refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTokenRepositoryInterface creates a new instance of TokenRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenRepositoryInterface {
	mock := &TokenRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
