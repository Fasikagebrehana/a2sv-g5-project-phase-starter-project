// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	domain "aait.backend.g10/domain"
	dto "aait.backend.g10/usecases/dto"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// CommentUsecaseInterface is an autogenerated mock type for the CommentUsecaseInterface type
type CommentUsecaseInterface struct {
	mock.Mock
}

// AddComment provides a mock function with given fields: comment
func (_m *CommentUsecaseInterface) AddComment(comment domain.Comment) *domain.CustomError {
	ret := _m.Called(comment)

	if len(ret) == 0 {
		panic("no return value specified for AddComment")
	}

	var r0 *domain.CustomError
	if rf, ok := ret.Get(0).(func(domain.Comment) *domain.CustomError); ok {
		r0 = rf(comment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CustomError)
		}
	}

	return r0
}

// DeleteComment provides a mock function with given fields: commentID, requesterID, isAdmin
func (_m *CommentUsecaseInterface) DeleteComment(commentID uuid.UUID, requesterID uuid.UUID, isAdmin bool) *domain.CustomError {
	ret := _m.Called(commentID, requesterID, isAdmin)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 *domain.CustomError
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, bool) *domain.CustomError); ok {
		r0 = rf(commentID, requesterID, isAdmin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CustomError)
		}
	}

	return r0
}

// GetCommentByID provides a mock function with given fields: commentID
func (_m *CommentUsecaseInterface) GetCommentByID(commentID uuid.UUID) (*dto.CommentDto, *domain.CustomError) {
	ret := _m.Called(commentID)

	if len(ret) == 0 {
		panic("no return value specified for GetCommentByID")
	}

	var r0 *dto.CommentDto
	var r1 *domain.CustomError
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*dto.CommentDto, *domain.CustomError)); ok {
		return rf(commentID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *dto.CommentDto); ok {
		r0 = rf(commentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CommentDto)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) *domain.CustomError); ok {
		r1 = rf(commentID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.CustomError)
		}
	}

	return r0, r1
}

// GetComments provides a mock function with given fields: blogID
func (_m *CommentUsecaseInterface) GetComments(blogID uuid.UUID) ([]*dto.CommentDto, *domain.CustomError) {
	ret := _m.Called(blogID)

	if len(ret) == 0 {
		panic("no return value specified for GetComments")
	}

	var r0 []*dto.CommentDto
	var r1 *domain.CustomError
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]*dto.CommentDto, *domain.CustomError)); ok {
		return rf(blogID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []*dto.CommentDto); ok {
		r0 = rf(blogID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.CommentDto)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) *domain.CustomError); ok {
		r1 = rf(blogID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.CustomError)
		}
	}

	return r0, r1
}

// UpdateComment provides a mock function with given fields: requester_id, updatedComment
func (_m *CommentUsecaseInterface) UpdateComment(requester_id uuid.UUID, updatedComment domain.Comment) *domain.CustomError {
	ret := _m.Called(requester_id, updatedComment)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComment")
	}

	var r0 *domain.CustomError
	if rf, ok := ret.Get(0).(func(uuid.UUID, domain.Comment) *domain.CustomError); ok {
		r0 = rf(requester_id, updatedComment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CustomError)
		}
	}

	return r0
}

// NewCommentUsecaseInterface creates a new instance of CommentUsecaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommentUsecaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommentUsecaseInterface {
	mock := &CommentUsecaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
