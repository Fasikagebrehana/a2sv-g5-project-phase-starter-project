// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	domain "blog_api/domain"
	context "context"

	dtos "blog_api/domain/dtos"

	mock "github.com/stretchr/testify/mock"
)

// UserUsecaseInterface is an autogenerated mock type for the UserUsecaseInterface type
type UserUsecaseInterface struct {
	mock.Mock
}

// DemoteUser provides a mock function with given fields: c, username
func (_m *UserUsecaseInterface) DemoteUser(c context.Context, username string) domain.CodedError {
	ret := _m.Called(c, username)

	if len(ret) == 0 {
		panic("no return value specified for DemoteUser")
	}

	var r0 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.CodedError); ok {
		r0 = rf(c, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.CodedError)
		}
	}

	return r0
}

// InitResetPassword provides a mock function with given fields: c, username, email, hostUrl
func (_m *UserUsecaseInterface) InitResetPassword(c context.Context, username string, email string, hostUrl string) domain.CodedError {
	ret := _m.Called(c, username, email, hostUrl)

	if len(ret) == 0 {
		panic("no return value specified for InitResetPassword")
	}

	var r0 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) domain.CodedError); ok {
		r0 = rf(c, username, email, hostUrl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.CodedError)
		}
	}

	return r0
}

// Login provides a mock function with given fields: c, user
func (_m *UserUsecaseInterface) Login(c context.Context, user *domain.User) (string, string, domain.CodedError) {
	ret := _m.Called(c, user)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 string
	var r2 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) (string, string, domain.CodedError)); ok {
		return rf(c, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) string); ok {
		r0 = rf(c, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.User) string); ok {
		r1 = rf(c, user)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *domain.User) domain.CodedError); ok {
		r2 = rf(c, user)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(domain.CodedError)
		}
	}

	return r0, r1, r2
}

// Logout provides a mock function with given fields: c, username, accessToken
func (_m *UserUsecaseInterface) Logout(c context.Context, username string, accessToken string) domain.CodedError {
	ret := _m.Called(c, username, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, string, string) domain.CodedError); ok {
		r0 = rf(c, username, accessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.CodedError)
		}
	}

	return r0
}

// OAuthLogin provides a mock function with given fields: c, data
func (_m *UserUsecaseInterface) OAuthLogin(c context.Context, data *dtos.GoogleResponse) (string, string, domain.CodedError) {
	ret := _m.Called(c, data)

	if len(ret) == 0 {
		panic("no return value specified for OAuthLogin")
	}

	var r0 string
	var r1 string
	var r2 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, *dtos.GoogleResponse) (string, string, domain.CodedError)); ok {
		return rf(c, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dtos.GoogleResponse) string); ok {
		r0 = rf(c, data)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dtos.GoogleResponse) string); ok {
		r1 = rf(c, data)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *dtos.GoogleResponse) domain.CodedError); ok {
		r2 = rf(c, data)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(domain.CodedError)
		}
	}

	return r0, r1, r2
}

// OAuthSignup provides a mock function with given fields: c, data, userCreds
func (_m *UserUsecaseInterface) OAuthSignup(c context.Context, data *dtos.GoogleResponse, userCreds *dtos.OAuthSignup) domain.CodedError {
	ret := _m.Called(c, data, userCreds)

	if len(ret) == 0 {
		panic("no return value specified for OAuthSignup")
	}

	var r0 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, *dtos.GoogleResponse, *dtos.OAuthSignup) domain.CodedError); ok {
		r0 = rf(c, data, userCreds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.CodedError)
		}
	}

	return r0
}

// PromoteUser provides a mock function with given fields: c, username
func (_m *UserUsecaseInterface) PromoteUser(c context.Context, username string) domain.CodedError {
	ret := _m.Called(c, username)

	if len(ret) == 0 {
		panic("no return value specified for PromoteUser")
	}

	var r0 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.CodedError); ok {
		r0 = rf(c, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.CodedError)
		}
	}

	return r0
}

// RenewAccessToken provides a mock function with given fields: c, refreshToken
func (_m *UserUsecaseInterface) RenewAccessToken(c context.Context, refreshToken string) (string, domain.CodedError) {
	ret := _m.Called(c, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for RenewAccessToken")
	}

	var r0 string
	var r1 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, domain.CodedError)); ok {
		return rf(c, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(c, refreshToken)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) domain.CodedError); ok {
		r1 = rf(c, refreshToken)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(domain.CodedError)
		}
	}

	return r0, r1
}

// ResetPassword provides a mock function with given fields: c, resetDto, token
func (_m *UserUsecaseInterface) ResetPassword(c context.Context, resetDto dtos.ResetPassword, token string) domain.CodedError {
	ret := _m.Called(c, resetDto, token)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, dtos.ResetPassword, string) domain.CodedError); ok {
		r0 = rf(c, resetDto, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.CodedError)
		}
	}

	return r0
}

// Signup provides a mock function with given fields: c, user, hostUrl
func (_m *UserUsecaseInterface) Signup(c context.Context, user *domain.User, hostUrl string) domain.CodedError {
	ret := _m.Called(c, user, hostUrl)

	if len(ret) == 0 {
		panic("no return value specified for Signup")
	}

	var r0 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User, string) domain.CodedError); ok {
		r0 = rf(c, user, hostUrl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.CodedError)
		}
	}

	return r0
}

// UpdateUser provides a mock function with given fields: c, requestUsername, tokenUsername, user
func (_m *UserUsecaseInterface) UpdateUser(c context.Context, requestUsername string, tokenUsername string, user *dtos.UpdateUser) (map[string]string, domain.CodedError) {
	ret := _m.Called(c, requestUsername, tokenUsername, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 map[string]string
	var r1 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *dtos.UpdateUser) (map[string]string, domain.CodedError)); ok {
		return rf(c, requestUsername, tokenUsername, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *dtos.UpdateUser) map[string]string); ok {
		r0 = rf(c, requestUsername, tokenUsername, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *dtos.UpdateUser) domain.CodedError); ok {
		r1 = rf(c, requestUsername, tokenUsername, user)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(domain.CodedError)
		}
	}

	return r0, r1
}

// VerifyEmail provides a mock function with given fields: c, username, token, hostUrl
func (_m *UserUsecaseInterface) VerifyEmail(c context.Context, username string, token string, hostUrl string) domain.CodedError {
	ret := _m.Called(c, username, token, hostUrl)

	if len(ret) == 0 {
		panic("no return value specified for VerifyEmail")
	}

	var r0 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) domain.CodedError); ok {
		r0 = rf(c, username, token, hostUrl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.CodedError)
		}
	}

	return r0
}

// NewUserUsecaseInterface creates a new instance of UserUsecaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUsecaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUsecaseInterface {
	mock := &UserUsecaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
