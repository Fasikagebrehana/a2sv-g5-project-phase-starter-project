// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "blog/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// PopularityRepository is an autogenerated mock type for the PopularityRepository type
type PopularityRepository struct {
	mock.Mock
}

// HasUserDisliked provides a mock function with given fields: ctx, id, userID
func (_m *PopularityRepository) HasUserDisliked(ctx context.Context, id primitive.ObjectID, userID primitive.ObjectID) (bool, error) {
	ret := _m.Called(ctx, id, userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) bool); ok {
		r0 = rf(ctx, id, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r1 = rf(ctx, id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasUserLiked provides a mock function with given fields: ctx, id, userID
func (_m *PopularityRepository) HasUserLiked(ctx context.Context, id primitive.ObjectID, userID primitive.ObjectID) (bool, error) {
	ret := _m.Called(ctx, id, userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) bool); ok {
		r0 = rf(ctx, id, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r1 = rf(ctx, id, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserInteractionsAdder provides a mock function with given fields: ctx, user
func (_m *PopularityRepository) UserInteractionsAdder(ctx context.Context, user domain.UserInteraction) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserInteraction) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserInteractionsDelete provides a mock function with given fields: ctx, user
func (_m *PopularityRepository) UserInteractionsDelete(ctx context.Context, user domain.UserInteraction) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserInteraction) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPopularityRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPopularityRepository creates a new instance of PopularityRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPopularityRepository(t mockConstructorTestingTNewPopularityRepository) *PopularityRepository {
	mock := &PopularityRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
