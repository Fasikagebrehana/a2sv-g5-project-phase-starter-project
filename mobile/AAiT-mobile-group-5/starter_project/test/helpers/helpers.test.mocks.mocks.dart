// Mocks generated by Mockito 5.4.4 from annotations
// in starter_project/test/helpers/helpers.test.mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:starter_project/core/errors/failure.dart' as _i5;
import 'package:starter_project/core/usecases/usecases.dart' as _i8;
import 'package:starter_project/features/chat/domain/entities/chat_entity.dart'
    as _i6;
import 'package:starter_project/features/chat/domain/entities/message_entity.dart'
    as _i7;
import 'package:starter_project/features/chat/domain/repositories/chat_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ChatRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatRepository extends _i1.Mock implements _i3.ChatRepository {
  MockChatRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deleteChat(String? chatId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteChat,
          [chatId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #deleteChat,
            [chatId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Chat>>> getAllChat() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllChat,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i6.Chat>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.Chat>>(
          this,
          Invocation.method(
            #getAllChat,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Chat>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Chat>> getSingleChat(String? chatId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSingleChat,
          [chatId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Chat>>.value(
            _FakeEither_0<_i5.Failure, _i6.Chat>(
          this,
          Invocation.method(
            #getSingleChat,
            [chatId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Chat>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Chat>> intiateChat(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #intiateChat,
          [userId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Chat>>.value(
            _FakeEither_0<_i5.Failure, _i6.Chat>(
          this,
          Invocation.method(
            #intiateChat,
            [userId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Chat>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i7.Message>>> getAllChatMessages(
          String? chatId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllChatMessages,
          [chatId],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i7.Message>>>.value(
                _FakeEither_0<_i5.Failure, List<_i7.Message>>(
          this,
          Invocation.method(
            #getAllChatMessages,
            [chatId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i7.Message>>>);
}

/// A class which mocks [UseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUseCase<Type, Params> extends _i1.Mock
    implements _i8.UseCase<Type, Params> {
  MockUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, Type>> call(Params? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, Type>>.value(
            _FakeEither_0<_i5.Failure, Type>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, Type>>);
}
