// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "blogs/Domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// UserUseCase is an autogenerated mock type for the UserUseCase type
type UserUseCase struct {
	mock.Mock
}

// PromoteandDemoteUser provides a mock function with given fields: ctx, id, promotion, role
func (_m *UserUseCase) PromoteandDemoteUser(ctx context.Context, id string, promotion domain.UserPromotionRequest, role string) interface{} {
	ret := _m.Called(ctx, id, promotion, role)

	if len(ret) == 0 {
		panic("no return value specified for PromoteandDemoteUser")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.UserPromotionRequest, string) interface{}); ok {
		r0 = rf(ctx, id, promotion, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// UpdateUser provides a mock function with given fields: ctx, user
func (_m *UserUseCase) UpdateUser(ctx context.Context, user domain.UserUpdateRequest) interface{} {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, domain.UserUpdateRequest) interface{}); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// NewUserUseCase creates a new instance of UserUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUseCase {
	mock := &UserUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
