// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// AIServicesInterface is an autogenerated mock type for the AIServicesInterface type
type AIServicesInterface struct {
	mock.Mock
}

// CleanText provides a mock function with given fields: value
func (_m *AIServicesInterface) CleanText(value interface{}) string {
	ret := _m.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for CleanText")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(interface{}) string); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ExtractText provides a mock function with given fields: value
func (_m *AIServicesInterface) ExtractText(value interface{}) string {
	ret := _m.Called(value)

	if len(ret) == 0 {
		panic("no return value specified for ExtractText")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(interface{}) string); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GenerateContent provides a mock function with given fields: topics
func (_m *AIServicesInterface) GenerateContent(topics []string) (string, error) {
	ret := _m.Called(topics)

	if len(ret) == 0 {
		panic("no return value specified for GenerateContent")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) (string, error)); ok {
		return rf(topics)
	}
	if rf, ok := ret.Get(0).(func([]string) string); ok {
		r0 = rf(topics)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(topics)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateTrendingTopics provides a mock function with given fields: keywords
func (_m *AIServicesInterface) GenerateTrendingTopics(keywords []string) ([]string, error) {
	ret := _m.Called(keywords)

	if len(ret) == 0 {
		panic("no return value specified for GenerateTrendingTopics")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]string, error)); ok {
		return rf(keywords)
	}
	if rf, ok := ret.Get(0).(func([]string) []string); ok {
		r0 = rf(keywords)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(keywords)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReviewContent provides a mock function with given fields: blogContent
func (_m *AIServicesInterface) ReviewContent(blogContent string) (string, error) {
	ret := _m.Called(blogContent)

	if len(ret) == 0 {
		panic("no return value specified for ReviewContent")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(blogContent)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(blogContent)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(blogContent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAIServicesInterface creates a new instance of AIServicesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAIServicesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AIServicesInterface {
	mock := &AIServicesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
