// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	genai "github.com/google/generative-ai-go/genai"

	mock "github.com/stretchr/testify/mock"
)

// AIModelInterface is an autogenerated mock type for the AIModelInterface type
type AIModelInterface struct {
	mock.Mock
}

// GenerateContent provides a mock function with given fields: _a0, _a1
func (_m *AIModelInterface) GenerateContent(_a0 context.Context, _a1 ...genai.Part) (*genai.GenerateContentResponse, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GenerateContent")
	}

	var r0 *genai.GenerateContentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...genai.Part) (*genai.GenerateContentResponse, error)); ok {
		return rf(_a0, _a1...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...genai.Part) *genai.GenerateContentResponse); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*genai.GenerateContentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...genai.Part) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAIModelInterface creates a new instance of AIModelInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAIModelInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AIModelInterface {
	mock := &AIModelInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
