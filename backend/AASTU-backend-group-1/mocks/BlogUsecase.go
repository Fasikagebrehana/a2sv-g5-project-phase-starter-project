// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "blogs/domain"

	mock "github.com/stretchr/testify/mock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	time "time"
)

// BlogUsecase is an autogenerated mock type for the BlogUsecase type
type BlogUsecase struct {
	mock.Mock
}

// AddComment provides a mock function with given fields: comment
func (_m *BlogUsecase) AddComment(comment *domain.Comment) error {
	ret := _m.Called(comment)

	if len(ret) == 0 {
		panic("no return value specified for AddComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Comment) error); ok {
		r0 = rf(comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddLike provides a mock function with given fields: like
func (_m *BlogUsecase) AddLike(like *domain.Like) error {
	ret := _m.Called(like)

	if len(ret) == 0 {
		panic("no return value specified for AddLike")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Like) error); ok {
		r0 = rf(like)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddView provides a mock function with given fields: view, claim
func (_m *BlogUsecase) AddView(view []primitive.ObjectID, claim domain.LoginClaims) error {
	ret := _m.Called(view, claim)

	if len(ret) == 0 {
		panic("no return value specified for AddView")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]primitive.ObjectID, domain.LoginClaims) error); ok {
		r0 = rf(view, claim)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBlogByID provides a mock function with given fields: id, claim
func (_m *BlogUsecase) DeleteBlogByID(id string, claim *domain.LoginClaims) error {
	ret := _m.Called(id, claim)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBlogByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *domain.LoginClaims) error); ok {
		r0 = rf(id, claim)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterBlog provides a mock function with given fields: tags, dateFrom, dateTo
func (_m *BlogUsecase) FilterBlog(tags []string, dateFrom time.Time, dateTo time.Time) ([]*domain.Blog, error) {
	ret := _m.Called(tags, dateFrom, dateTo)

	if len(ret) == 0 {
		panic("no return value specified for FilterBlog")
	}

	var r0 []*domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func([]string, time.Time, time.Time) ([]*domain.Blog, error)); ok {
		return rf(tags, dateFrom, dateTo)
	}
	if rf, ok := ret.Get(0).(func([]string, time.Time, time.Time) []*domain.Blog); ok {
		r0 = rf(tags, dateFrom, dateTo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func([]string, time.Time, time.Time) error); ok {
		r1 = rf(tags, dateFrom, dateTo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateAiContent provides a mock function with given fields: prompt
func (_m *BlogUsecase) GenerateAiContent(prompt string) (string, error) {
	ret := _m.Called(prompt)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAiContent")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(prompt)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(prompt)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prompt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlogByID provides a mock function with given fields: id
func (_m *BlogUsecase) GetBlogByID(id string) (*domain.Blog, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetBlogByID")
	}

	var r0 *domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Blog, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Blog); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlogComments provides a mock function with given fields: blogID
func (_m *BlogUsecase) GetBlogComments(blogID string) ([]*domain.Comment, error) {
	ret := _m.Called(blogID)

	if len(ret) == 0 {
		panic("no return value specified for GetBlogComments")
	}

	var r0 []*domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*domain.Comment, error)); ok {
		return rf(blogID)
	}
	if rf, ok := ret.Get(0).(func(string) []*domain.Comment); ok {
		r0 = rf(blogID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(blogID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlogLikes provides a mock function with given fields: blogID
func (_m *BlogUsecase) GetBlogLikes(blogID string) ([]*domain.Like, error) {
	ret := _m.Called(blogID)

	if len(ret) == 0 {
		panic("no return value specified for GetBlogLikes")
	}

	var r0 []*domain.Like
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*domain.Like, error)); ok {
		return rf(blogID)
	}
	if rf, ok := ret.Get(0).(func(string) []*domain.Like); ok {
		r0 = rf(blogID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Like)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(blogID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlogs provides a mock function with given fields: sortBy, page, limit, reverse
func (_m *BlogUsecase) GetBlogs(sortBy string, page int, limit int, reverse bool) ([]*domain.Blog, error) {
	ret := _m.Called(sortBy, page, limit, reverse)

	if len(ret) == 0 {
		panic("no return value specified for GetBlogs")
	}

	var r0 []*domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int, bool) ([]*domain.Blog, error)); ok {
		return rf(sortBy, page, limit, reverse)
	}
	if rf, ok := ret.Get(0).(func(string, int, int, bool) []*domain.Blog); ok {
		r0 = rf(sortBy, page, limit, reverse)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int, bool) error); ok {
		r1 = rf(sortBy, page, limit, reverse)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertBlog provides a mock function with given fields: blog
func (_m *BlogUsecase) InsertBlog(blog *domain.Blog) (*domain.Blog, error) {
	ret := _m.Called(blog)

	if len(ret) == 0 {
		panic("no return value specified for InsertBlog")
	}

	var r0 *domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Blog) (*domain.Blog, error)); ok {
		return rf(blog)
	}
	if rf, ok := ret.Get(0).(func(*domain.Blog) *domain.Blog); ok {
		r0 = rf(blog)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Blog) error); ok {
		r1 = rf(blog)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveLike provides a mock function with given fields: id, claim
func (_m *BlogUsecase) RemoveLike(id string, claim *domain.LoginClaims) error {
	ret := _m.Called(id, claim)

	if len(ret) == 0 {
		panic("no return value specified for RemoveLike")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *domain.LoginClaims) error); ok {
		r0 = rf(id, claim)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchBlog provides a mock function with given fields: title, author, tags
func (_m *BlogUsecase) SearchBlog(title string, author string, tags []string) ([]*domain.Blog, error) {
	ret := _m.Called(title, author, tags)

	if len(ret) == 0 {
		panic("no return value specified for SearchBlog")
	}

	var r0 []*domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, []string) ([]*domain.Blog, error)); ok {
		return rf(title, author, tags)
	}
	if rf, ok := ret.Get(0).(func(string, string, []string) []*domain.Blog); ok {
		r0 = rf(title, author, tags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, []string) error); ok {
		r1 = rf(title, author, tags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBlogByID provides a mock function with given fields: id, blog, claim
func (_m *BlogUsecase) UpdateBlogByID(id string, blog *domain.Blog, claim *domain.LoginClaims) error {
	ret := _m.Called(id, blog, claim)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBlogByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *domain.Blog, *domain.LoginClaims) error); ok {
		r0 = rf(id, blog, claim)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBlogUsecase creates a new instance of BlogUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlogUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlogUsecase {
	mock := &BlogUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
