// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	domain "Blog_Starter/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// SignupUsecase is an autogenerated mock type for the SignupUsecase type
type SignupUsecase struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: c, user
func (_m *SignupUsecase) CreateUser(c context.Context, user *domain.UserSignUp) (*domain.User, error) {
	ret := _m.Called(c, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UserSignUp) (*domain.User, error)); ok {
		return rf(c, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UserSignUp) *domain.User); ok {
		r0 = rf(c, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.UserSignUp) error); ok {
		r1 = rf(c, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResendOTP provides a mock function with given fields: c, req
func (_m *SignupUsecase) ResendOTP(c context.Context, req *domain.ResendOTPRequest) error {
	ret := _m.Called(c, req)

	if len(ret) == 0 {
		panic("no return value specified for ResendOTP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ResendOTPRequest) error); ok {
		r0 = rf(c, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyEmail provides a mock function with given fields: c, req
func (_m *SignupUsecase) VerifyEmail(c context.Context, req *domain.VerifyEmailRequest) (*domain.UserResponse, error) {
	ret := _m.Called(c, req)

	if len(ret) == 0 {
		panic("no return value specified for VerifyEmail")
	}

	var r0 *domain.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.VerifyEmailRequest) (*domain.UserResponse, error)); ok {
		return rf(c, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.VerifyEmailRequest) *domain.UserResponse); ok {
		r0 = rf(c, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.VerifyEmailRequest) error); ok {
		r1 = rf(c, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSignupUsecase creates a new instance of SignupUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSignupUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *SignupUsecase {
	mock := &SignupUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
