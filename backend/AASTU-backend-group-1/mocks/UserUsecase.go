// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "blogs/domain"

	mock "github.com/stretchr/testify/mock"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// AddRoot provides a mock function with given fields:
func (_m *UserUsecase) AddRoot() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangePassword provides a mock function with given fields: usernameoremail, oldPassword, newPassword
func (_m *UserUsecase) ChangePassword(usernameoremail string, oldPassword string, newPassword string) error {
	ret := _m.Called(usernameoremail, oldPassword, newPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(usernameoremail, oldPassword, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: username
func (_m *UserUsecase) DeleteUser(username string) error {
	ret := _m.Called(username)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ForgotPassword provides a mock function with given fields: email, newPassword
func (_m *UserUsecase) ForgotPassword(email string, newPassword string) error {
	ret := _m.Called(email, newPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(email, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByUsername provides a mock function with given fields: username
func (_m *UserUsecase) GetUserByUsername(username string) (*domain.User, error) {
	ret := _m.Called(username)

	var r0 *domain.User
	if rf, ok := ret.Get(0).(func(string) *domain.User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GoogleCallback provides a mock function with given fields: state, code
func (_m *UserUsecase) GoogleCallback(state string, code string) (string, string, error) {
	ret := _m.Called(state, code)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(state, code)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(state, code)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(state, code)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GoogleLogin provides a mock function with given fields:
func (_m *UserUsecase) GoogleLogin() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: usernameoremail, password
func (_m *UserUsecase) LoginUser(usernameoremail string, password string) (string, string, error) {
	ret := _m.Called(usernameoremail, password)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(usernameoremail, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(usernameoremail, password)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(usernameoremail, password)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LogoutUser provides a mock function with given fields: username
func (_m *UserUsecase) LogoutUser(username string) error {
	ret := _m.Called(username)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PromoteUser provides a mock function with given fields: username, promoted, claims
func (_m *UserUsecase) PromoteUser(username string, promoted bool, claims *domain.LoginClaims) error {
	ret := _m.Called(username, promoted, claims)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool, *domain.LoginClaims) error); ok {
		r0 = rf(username, promoted, claims)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshToken provides a mock function with given fields: claims
func (_m *UserUsecase) RefreshToken(claims *domain.LoginClaims) (string, error) {
	ret := _m.Called(claims)

	var r0 string
	if rf, ok := ret.Get(0).(func(*domain.LoginClaims) string); ok {
		r0 = rf(claims)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.LoginClaims) error); ok {
		r1 = rf(claims)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: user
func (_m *UserUsecase) RegisterUser(user *domain.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResetPassword provides a mock function with given fields: tokenString
func (_m *UserUsecase) ResetPassword(tokenString string) error {
	ret := _m.Called(tokenString)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(tokenString)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProfile provides a mock function with given fields: user, claims
func (_m *UserUsecase) UpdateProfile(user *domain.User, claims *domain.LoginClaims) error {
	ret := _m.Called(user, claims)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.User, *domain.LoginClaims) error); ok {
		r0 = rf(user, claims)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyUser provides a mock function with given fields: token
func (_m *UserUsecase) VerifyUser(token string) error {
	ret := _m.Called(token)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserUsecase(t mockConstructorTestingTNewUserUsecase) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
