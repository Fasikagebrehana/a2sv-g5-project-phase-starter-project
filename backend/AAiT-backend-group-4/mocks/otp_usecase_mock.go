// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "aait-backend-group4/Domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// OTPUsecase is an autogenerated mock type for the OTPUsecase type
type OTPUsecase struct {
	mock.Mock
}

// GenerateOTP provides a mock function with given fields: c, user
func (_m *OTPUsecase) GenerateOTP(c context.Context, user *domain.UserOTPRequest) (domain.OTPVerificationResponse, error) {
	ret := _m.Called(c, user)

	var r0 domain.OTPVerificationResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UserOTPRequest) domain.OTPVerificationResponse); ok {
		r0 = rf(c, user)
	} else {
		r0 = ret.Get(0).(domain.OTPVerificationResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.UserOTPRequest) error); ok {
		r1 = rf(c, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResendOTP provides a mock function with given fields: c, email
func (_m *OTPUsecase) ResendOTP(c context.Context, email string) (domain.OTPVerificationResponse, error) {
	ret := _m.Called(c, email)

	var r0 domain.OTPVerificationResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.OTPVerificationResponse); ok {
		r0 = rf(c, email)
	} else {
		r0 = ret.Get(0).(domain.OTPVerificationResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyOTP provides a mock function with given fields: c, email, otp
func (_m *OTPUsecase) VerifyOTP(c context.Context, email string, otp string) (domain.OTPVerificationResponse, error) {
	ret := _m.Called(c, email, otp)

	var r0 domain.OTPVerificationResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string) domain.OTPVerificationResponse); ok {
		r0 = rf(c, email, otp)
	} else {
		r0 = ret.Get(0).(domain.OTPVerificationResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(c, email, otp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOTPUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewOTPUsecase creates a new instance of OTPUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOTPUsecase(t mockConstructorTestingTNewOTPUsecase) *OTPUsecase {
	mock := &OTPUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
