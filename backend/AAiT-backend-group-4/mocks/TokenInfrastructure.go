// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "aait-backend-group4/Domain"

	mock "github.com/stretchr/testify/mock"
)

// TokenInfrastructure is an autogenerated mock type for the TokenInfrastructure type
type TokenInfrastructure struct {
	mock.Mock
}

// CheckTokenExpiry provides a mock function with given fields: tokenString, secret
func (_m *TokenInfrastructure) CheckTokenExpiry(tokenString string, secret string) (bool, error) {
	ret := _m.Called(tokenString, secret)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(tokenString, secret)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(tokenString, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAllTokens provides a mock function with given fields: user, accessSecret, refreshSecret, accessExpiry, refreshExpiry
func (_m *TokenInfrastructure) CreateAllTokens(user *domain.User, accessSecret string, refreshSecret string, accessExpiry int, refreshExpiry int) (string, string, error) {
	ret := _m.Called(user, accessSecret, refreshSecret, accessExpiry, refreshExpiry)

	var r0 string
	if rf, ok := ret.Get(0).(func(*domain.User, string, string, int, int) string); ok {
		r0 = rf(user, accessSecret, refreshSecret, accessExpiry, refreshExpiry)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(*domain.User, string, string, int, int) string); ok {
		r1 = rf(user, accessSecret, refreshSecret, accessExpiry, refreshExpiry)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*domain.User, string, string, int, int) error); ok {
		r2 = rf(user, accessSecret, refreshSecret, accessExpiry, refreshExpiry)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ExtractClaims provides a mock function with given fields: tokenString, secret
func (_m *TokenInfrastructure) ExtractClaims(tokenString string, secret string) (map[string]interface{}, error) {
	ret := _m.Called(tokenString, secret)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(string, string) map[string]interface{}); ok {
		r0 = rf(tokenString, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(tokenString, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExtractRoleFromToken provides a mock function with given fields: tokenString, secret
func (_m *TokenInfrastructure) ExtractRoleFromToken(tokenString string, secret string) (string, error) {
	ret := _m.Called(tokenString, secret)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(tokenString, secret)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(tokenString, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExtractUserIDFromToken provides a mock function with given fields: tokenString, secret
func (_m *TokenInfrastructure) ExtractUserIDFromToken(tokenString string, secret string) (string, error) {
	ret := _m.Called(tokenString, secret)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(tokenString, secret)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(tokenString, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTokens provides a mock function with given fields: id
func (_m *TokenInfrastructure) RemoveTokens(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTokens provides a mock function with given fields: id
func (_m *TokenInfrastructure) UpdateTokens(id string) (string, string, error) {
	ret := _m.Called(id)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ValidateToken provides a mock function with given fields: tokenString, secret
func (_m *TokenInfrastructure) ValidateToken(tokenString string, secret string) (bool, error) {
	ret := _m.Called(tokenString, secret)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(tokenString, secret)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(tokenString, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTokenInfrastructure interface {
	mock.TestingT
	Cleanup(func())
}

// NewTokenInfrastructure creates a new instance of TokenInfrastructure. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTokenInfrastructure(t mockConstructorTestingTNewTokenInfrastructure) *TokenInfrastructure {
	mock := &TokenInfrastructure{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
