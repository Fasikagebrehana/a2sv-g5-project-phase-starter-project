// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "AAiT-backend-group-2/Domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// CountDocuments provides a mock function with given fields: c
func (_m *UserRepository) CountDocuments(c context.Context) (int64, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for CountDocuments")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: c, id
func (_m *UserRepository) Delete(c context.Context, id string) error {
	ret := _m.Called(c, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DemoteAdmin provides a mock function with given fields: c, id, updateData
func (_m *UserRepository) DemoteAdmin(c context.Context, id string, updateData domain.UpdateData) error {
	ret := _m.Called(c, id, updateData)

	if len(ret) == 0 {
		panic("no return value specified for DemoteAdmin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.UpdateData) error); ok {
		r0 = rf(c, id, updateData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: c
func (_m *UserRepository) FindAll(c context.Context) ([]domain.User, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.User, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.User); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByEmailOrUsername provides a mock function with given fields: c, emailOrUsername
func (_m *UserRepository) FindByEmailOrUsername(c context.Context, emailOrUsername string) (*domain.User, error) {
	ret := _m.Called(c, emailOrUsername)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmailOrUsername")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return rf(c, emailOrUsername)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = rf(c, emailOrUsername)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, emailOrUsername)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: c, id
func (_m *UserRepository) FindByID(c context.Context, id string) (*domain.User, error) {
	ret := _m.Called(c, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return rf(c, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = rf(c, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ForgotPassword provides a mock function with given fields: c, email, token
func (_m *UserRepository) ForgotPassword(c context.Context, email string, token string) (string, error) {
	ret := _m.Called(c, email, token)

	if len(ret) == 0 {
		panic("no return value specified for ForgotPassword")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(c, email, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(c, email, token)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(c, email, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvalidateResetToken provides a mock function with given fields: c, userID
func (_m *UserRepository) InvalidateResetToken(c context.Context, userID string) error {
	ret := _m.Called(c, userID)

	if len(ret) == 0 {
		panic("no return value specified for InvalidateResetToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PromoteUser provides a mock function with given fields: c, id, updateData
func (_m *UserRepository) PromoteUser(c context.Context, id string, updateData domain.UpdateData) error {
	ret := _m.Called(c, id, updateData)

	if len(ret) == 0 {
		panic("no return value specified for PromoteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.UpdateData) error); ok {
		r0 = rf(c, id, updateData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: c, user
func (_m *UserRepository) Save(c context.Context, user domain.User) error {
	ret := _m.Called(c, user)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) error); ok {
		r0 = rf(c, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: c, id, updateData
func (_m *UserRepository) Update(c context.Context, id string, updateData domain.UpdateData) error {
	ret := _m.Called(c, id, updateData)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.UpdateData) error); ok {
		r0 = rf(c, id, updateData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateResetToken provides a mock function with given fields: c, userID, token
func (_m *UserRepository) ValidateResetToken(c context.Context, userID string, token string) error {
	ret := _m.Called(c, userID, token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateResetToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(c, userID, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
