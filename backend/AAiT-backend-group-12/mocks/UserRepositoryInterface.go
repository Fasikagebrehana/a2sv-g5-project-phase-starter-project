// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	domain "blog_api/domain"
	context "context"

	dtos "blog_api/domain/dtos"

	mock "github.com/stretchr/testify/mock"
)

// UserRepositoryInterface is an autogenerated mock type for the UserRepositoryInterface type
type UserRepositoryInterface struct {
	mock.Mock
}

// ChangeRole provides a mock function with given fields: c, username, newRole
func (_m *UserRepositoryInterface) ChangeRole(c context.Context, username string, newRole string) domain.CodedError {
	ret := _m.Called(c, username, newRole)

	if len(ret) == 0 {
		panic("no return value specified for ChangeRole")
	}

	var r0 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, string, string) domain.CodedError); ok {
		r0 = rf(c, username, newRole)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.CodedError)
		}
	}

	return r0
}

// CreateUser provides a mock function with given fields: c, user
func (_m *UserRepositoryInterface) CreateUser(c context.Context, user *domain.User) domain.CodedError {
	ret := _m.Called(c, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) domain.CodedError); ok {
		r0 = rf(c, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.CodedError)
		}
	}

	return r0
}

// DeleteUser provides a mock function with given fields: c, username
func (_m *UserRepositoryInterface) DeleteUser(c context.Context, username string) domain.CodedError {
	ret := _m.Called(c, username)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.CodedError); ok {
		r0 = rf(c, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.CodedError)
		}
	}

	return r0
}

// FindUser provides a mock function with given fields: c, user
func (_m *UserRepositoryInterface) FindUser(c context.Context, user *domain.User) (domain.User, domain.CodedError) {
	ret := _m.Called(c, user)

	if len(ret) == 0 {
		panic("no return value specified for FindUser")
	}

	var r0 domain.User
	var r1 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) (domain.User, domain.CodedError)); ok {
		return rf(c, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) domain.User); ok {
		r0 = rf(c, user)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.User) domain.CodedError); ok {
		r1 = rf(c, user)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(domain.CodedError)
		}
	}

	return r0, r1
}

// SetRefreshToken provides a mock function with given fields: c, user, newRefreshToken
func (_m *UserRepositoryInterface) SetRefreshToken(c context.Context, user *domain.User, newRefreshToken string) domain.CodedError {
	ret := _m.Called(c, user, newRefreshToken)

	if len(ret) == 0 {
		panic("no return value specified for SetRefreshToken")
	}

	var r0 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User, string) domain.CodedError); ok {
		r0 = rf(c, user, newRefreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.CodedError)
		}
	}

	return r0
}

// UpdatePassword provides a mock function with given fields: c, username, newPassword
func (_m *UserRepositoryInterface) UpdatePassword(c context.Context, username string, newPassword string) domain.CodedError {
	ret := _m.Called(c, username, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, string, string) domain.CodedError); ok {
		r0 = rf(c, username, newPassword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.CodedError)
		}
	}

	return r0
}

// UpdateUser provides a mock function with given fields: c, username, user
func (_m *UserRepositoryInterface) UpdateUser(c context.Context, username string, user *dtos.UpdateUser) (map[string]string, string, domain.CodedError) {
	ret := _m.Called(c, username, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 map[string]string
	var r1 string
	var r2 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, string, *dtos.UpdateUser) (map[string]string, string, domain.CodedError)); ok {
		return rf(c, username, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *dtos.UpdateUser) map[string]string); ok {
		r0 = rf(c, username, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *dtos.UpdateUser) string); ok {
		r1 = rf(c, username, user)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *dtos.UpdateUser) domain.CodedError); ok {
		r2 = rf(c, username, user)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(domain.CodedError)
		}
	}

	return r0, r1, r2
}

// UpdateVerificationDetails provides a mock function with given fields: c, username, verificationData
func (_m *UserRepositoryInterface) UpdateVerificationDetails(c context.Context, username string, verificationData domain.VerificationData) domain.CodedError {
	ret := _m.Called(c, username, verificationData)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVerificationDetails")
	}

	var r0 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.VerificationData) domain.CodedError); ok {
		r0 = rf(c, username, verificationData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.CodedError)
		}
	}

	return r0
}

// VerifyUser provides a mock function with given fields: c, username
func (_m *UserRepositoryInterface) VerifyUser(c context.Context, username string) domain.CodedError {
	ret := _m.Called(c, username)

	if len(ret) == 0 {
		panic("no return value specified for VerifyUser")
	}

	var r0 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.CodedError); ok {
		r0 = rf(c, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.CodedError)
		}
	}

	return r0
}

// NewUserRepositoryInterface creates a new instance of UserRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepositoryInterface {
	mock := &UserRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
