// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// AiRepository is an autogenerated mock type for the AiRepository type
type AiRepository struct {
	mock.Mock
}

// Chat provides a mock function with given fields: c, textContent
func (_m *AiRepository) Chat(c context.Context, textContent string) (string, error) {
	ret := _m.Called(c, textContent)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(c, textContent)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, textContent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateSuggestions provides a mock function with given fields: c, textContent
func (_m *AiRepository) GenerateSuggestions(c context.Context, textContent string) (string, error) {
	ret := _m.Called(c, textContent)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(c, textContent)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, textContent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateText provides a mock function with given fields: c, prompt
func (_m *AiRepository) GenerateText(c context.Context, prompt string) (string, error) {
	ret := _m.Called(c, prompt)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(c, prompt)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, prompt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAiRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewAiRepository creates a new instance of AiRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAiRepository(t mockConstructorTestingTNewAiRepository) *AiRepository {
	mock := &AiRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
