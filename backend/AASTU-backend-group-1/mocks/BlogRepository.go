// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "blogs/domain"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// BlogRepository is an autogenerated mock type for the BlogRepository type
type BlogRepository struct {
	mock.Mock
}

// AddComment provides a mock function with given fields: comment
func (_m *BlogRepository) AddComment(comment *domain.Comment) error {
	ret := _m.Called(comment)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Comment) error); ok {
		r0 = rf(comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddLike provides a mock function with given fields: like
func (_m *BlogRepository) AddLike(like *domain.Like) error {
	ret := _m.Called(like)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Like) error); ok {
		r0 = rf(like)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddView provides a mock function with given fields: view
func (_m *BlogRepository) AddView(view []*domain.View) error {
	ret := _m.Called(view)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*domain.View) error); ok {
		r0 = rf(view)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DecrementBlogComments provides a mock function with given fields: blogID
func (_m *BlogRepository) DecrementBlogComments(blogID string) error {
	ret := _m.Called(blogID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(blogID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DecrementBlogLikes provides a mock function with given fields: blogID
func (_m *BlogRepository) DecrementBlogLikes(blogID string) error {
	ret := _m.Called(blogID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(blogID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DecrementBlogViews provides a mock function with given fields: blogID
func (_m *BlogRepository) DecrementBlogViews(blogID string) error {
	ret := _m.Called(blogID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(blogID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBlogByID provides a mock function with given fields: id
func (_m *BlogRepository) DeleteBlogByID(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteComment provides a mock function with given fields: commentID
func (_m *BlogRepository) DeleteComment(commentID string) error {
	ret := _m.Called(commentID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(commentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterBlog provides a mock function with given fields: tags, dateFrom, dateTo
func (_m *BlogRepository) FilterBlog(tags []string, dateFrom time.Time, dateTo time.Time) ([]*domain.Blog, error) {
	ret := _m.Called(tags, dateFrom, dateTo)

	var r0 []*domain.Blog
	if rf, ok := ret.Get(0).(func([]string, time.Time, time.Time) []*domain.Blog); ok {
		r0 = rf(tags, dateFrom, dateTo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Blog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, time.Time, time.Time) error); ok {
		r1 = rf(tags, dateFrom, dateTo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlogByID provides a mock function with given fields: id
func (_m *BlogRepository) GetBlogByID(id string) (*domain.Blog, error) {
	ret := _m.Called(id)

	var r0 *domain.Blog
	if rf, ok := ret.Get(0).(func(string) *domain.Blog); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Blog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlogComments provides a mock function with given fields: blogID
func (_m *BlogRepository) GetBlogComments(blogID string) ([]*domain.Comment, error) {
	ret := _m.Called(blogID)

	var r0 []*domain.Comment
	if rf, ok := ret.Get(0).(func(string) []*domain.Comment); ok {
		r0 = rf(blogID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(blogID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlogLikes provides a mock function with given fields: blogID
func (_m *BlogRepository) GetBlogLikes(blogID string) ([]*domain.Like, error) {
	ret := _m.Called(blogID)

	var r0 []*domain.Like
	if rf, ok := ret.Get(0).(func(string) []*domain.Like); ok {
		r0 = rf(blogID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Like)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(blogID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlogsByPopularity provides a mock function with given fields: page, limit, reverse
func (_m *BlogRepository) GetBlogsByPopularity(page int, limit int, reverse bool) ([]*domain.Blog, error) {
	ret := _m.Called(page, limit, reverse)

	var r0 []*domain.Blog
	if rf, ok := ret.Get(0).(func(int, int, bool) []*domain.Blog); ok {
		r0 = rf(page, limit, reverse)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Blog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, bool) error); ok {
		r1 = rf(page, limit, reverse)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlogsByRecent provides a mock function with given fields: page, limit, reverse
func (_m *BlogRepository) GetBlogsByRecent(page int, limit int, reverse bool) ([]*domain.Blog, error) {
	ret := _m.Called(page, limit, reverse)

	var r0 []*domain.Blog
	if rf, ok := ret.Get(0).(func(int, int, bool) []*domain.Blog); ok {
		r0 = rf(page, limit, reverse)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Blog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, bool) error); ok {
		r1 = rf(page, limit, reverse)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommentByID provides a mock function with given fields: commentID
func (_m *BlogRepository) GetCommentByID(commentID string) (*domain.Comment, error) {
	ret := _m.Called(commentID)

	var r0 *domain.Comment
	if rf, ok := ret.Get(0).(func(string) *domain.Comment); ok {
		r0 = rf(commentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(commentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLikebyAuthorAndBlogID provides a mock function with given fields: blogID, author
func (_m *BlogRepository) GetLikebyAuthorAndBlogID(blogID string, author string) (*domain.Like, error) {
	ret := _m.Called(blogID, author)

	var r0 *domain.Like
	if rf, ok := ret.Get(0).(func(string, string) *domain.Like); ok {
		r0 = rf(blogID, author)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Like)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(blogID, author)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalBlogs provides a mock function with given fields:
func (_m *BlogRepository) GetTotalBlogs() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTotalBlogs")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrmentBlogComments provides a mock function with given fields: blogID
func (_m *BlogRepository) IncrmentBlogComments(blogID string) error {
	ret := _m.Called(blogID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(blogID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IncrmentBlogLikes provides a mock function with given fields: blogID
func (_m *BlogRepository) IncrmentBlogLikes(blogID string) error {
	ret := _m.Called(blogID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(blogID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IncrmentBlogViews provides a mock function with given fields: blogID
func (_m *BlogRepository) IncrmentBlogViews(blogID string) error {
	ret := _m.Called(blogID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(blogID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertBlog provides a mock function with given fields: blog
func (_m *BlogRepository) InsertBlog(blog *domain.Blog) (*domain.Blog, error) {
	ret := _m.Called(blog)

	var r0 *domain.Blog
	if rf, ok := ret.Get(0).(func(*domain.Blog) *domain.Blog); ok {
		r0 = rf(blog)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Blog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.Blog) error); ok {
		r1 = rf(blog)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveLike provides a mock function with given fields: blogID, author
func (_m *BlogRepository) RemoveLike(blogID string, author string) error {
	ret := _m.Called(blogID, author)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(blogID, author)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchBlog provides a mock function with given fields: title, author, tags
func (_m *BlogRepository) SearchBlog(title string, author string, tags []string) ([]*domain.Blog, error) {
	ret := _m.Called(title, author, tags)

	var r0 []*domain.Blog
	if rf, ok := ret.Get(0).(func(string, string, []string) []*domain.Blog); ok {
		r0 = rf(title, author, tags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Blog)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, []string) error); ok {
		r1 = rf(title, author, tags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBlogByID provides a mock function with given fields: id, blog
func (_m *BlogRepository) UpdateBlogByID(id string, blog *domain.Blog) error {
	ret := _m.Called(id, blog)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *domain.Blog) error); ok {
		r0 = rf(id, blog)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLike provides a mock function with given fields: like
func (_m *BlogRepository) UpdateLike(like *domain.Like) error {
	ret := _m.Called(like)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Like) error); ok {
		r0 = rf(like)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewBlogRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewBlogRepository creates a new instance of BlogRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBlogRepository(t mockConstructorTestingTNewBlogRepository) *BlogRepository {
	mock := &BlogRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
