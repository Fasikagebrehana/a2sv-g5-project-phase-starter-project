// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "AAiT-backend-group-2/Domain"

	mock "github.com/stretchr/testify/mock"
)

// CommentRepository is an autogenerated mock type for the CommentRepository type
type CommentRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *CommentRepository) Delete(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *CommentRepository) FindAll() ([]domain.Comment, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Comment, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Comment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByBlogID provides a mock function with given fields: blogID
func (_m *CommentRepository) FindByBlogID(blogID string) ([]domain.Comment, error) {
	ret := _m.Called(blogID)

	if len(ret) == 0 {
		panic("no return value specified for FindByBlogID")
	}

	var r0 []domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]domain.Comment, error)); ok {
		return rf(blogID)
	}
	if rf, ok := ret.Get(0).(func(string) []domain.Comment); ok {
		r0 = rf(blogID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(blogID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *CommentRepository) FindByID(id string) (*domain.Comment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Comment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Comment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: comment
func (_m *CommentRepository) Save(comment *domain.Comment) error {
	ret := _m.Called(comment)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Comment) error); ok {
		r0 = rf(comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: comment
func (_m *CommentRepository) Update(comment *domain.Comment) error {
	ret := _m.Called(comment)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Comment) error); ok {
		r0 = rf(comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCommentRepository creates a new instance of CommentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommentRepository {
	mock := &CommentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
