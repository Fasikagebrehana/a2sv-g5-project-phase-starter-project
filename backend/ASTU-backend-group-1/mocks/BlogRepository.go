// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "astu-backend-g1/domain"

	mock "github.com/stretchr/testify/mock"
)

// BlogRepository is an autogenerated mock type for the BlogRepository type
type BlogRepository struct {
	mock.Mock
}

// AddComment provides a mock function with given fields: blogId, comment
func (_m *BlogRepository) AddComment(blogId string, comment domain.Comment) error {
	ret := _m.Called(blogId, comment)

	if len(ret) == 0 {
		panic("no return value specified for AddComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, domain.Comment) error); ok {
		r0 = rf(blogId, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddView provides a mock function with given fields: blogId, userId
func (_m *BlogRepository) AddView(blogId string, userId string) error {
	ret := _m.Called(blogId, userId)

	if len(ret) == 0 {
		panic("no return value specified for AddView")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(blogId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: b
func (_m *BlogRepository) Create(b domain.Blog) (domain.Blog, error) {
	ret := _m.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Blog) (domain.Blog, error)); ok {
		return rf(b)
	}
	if rf, ok := ret.Get(0).(func(domain.Blog) domain.Blog); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(domain.Blog)
	}

	if rf, ok := ret.Get(1).(func(domain.Blog) error); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: blogId
func (_m *BlogRepository) Delete(blogId string) error {
	ret := _m.Called(blogId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(blogId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DislikeBlog provides a mock function with given fields: blogId, userId
func (_m *BlogRepository) DislikeBlog(blogId string, userId string) error {
	ret := _m.Called(blogId, userId)

	if len(ret) == 0 {
		panic("no return value specified for DislikeBlog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(blogId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: opts
func (_m *BlogRepository) Get(opts domain.BlogFilterOption) ([]domain.Blog, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.BlogFilterOption) ([]domain.Blog, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(domain.BlogFilterOption) []domain.Blog); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.BlogFilterOption) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LikeBlog provides a mock function with given fields: blogId, userId
func (_m *BlogRepository) LikeBlog(blogId string, userId string) error {
	ret := _m.Called(blogId, userId)

	if len(ret) == 0 {
		panic("no return value specified for LikeBlog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(blogId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReplyToComment provides a mock function with given fields: blogId, commentId, reply
func (_m *BlogRepository) ReplyToComment(blogId string, commentId string, reply domain.Reply) error {
	ret := _m.Called(blogId, commentId, reply)

	if len(ret) == 0 {
		panic("no return value specified for ReplyToComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, domain.Reply) error); ok {
		r0 = rf(blogId, commentId, reply)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: blogId, updateData
func (_m *BlogRepository) Update(blogId string, updateData domain.Blog) (domain.Blog, error) {
	ret := _m.Called(blogId, updateData)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(string, domain.Blog) (domain.Blog, error)); ok {
		return rf(blogId, updateData)
	}
	if rf, ok := ret.Get(0).(func(string, domain.Blog) domain.Blog); ok {
		r0 = rf(blogId, updateData)
	} else {
		r0 = ret.Get(0).(domain.Blog)
	}

	if rf, ok := ret.Get(1).(func(string, domain.Blog) error); ok {
		r1 = rf(blogId, updateData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBlogRepository creates a new instance of BlogRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlogRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlogRepository {
	mock := &BlogRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
