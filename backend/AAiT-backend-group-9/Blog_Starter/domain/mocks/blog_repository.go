// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	domain "Blog_Starter/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// BlogRepository is an autogenerated mock type for the BlogRepository type
type BlogRepository struct {
	mock.Mock
}

// CreateBlog provides a mock function with given fields: c, blog
func (_m *BlogRepository) CreateBlog(c context.Context, blog *domain.Blog) (*domain.Blog, error) {
	ret := _m.Called(c, blog)

	if len(ret) == 0 {
		panic("no return value specified for CreateBlog")
	}

	var r0 *domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Blog) (*domain.Blog, error)); ok {
		return rf(c, blog)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Blog) *domain.Blog); ok {
		r0 = rf(c, blog)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Blog) error); ok {
		r1 = rf(c, blog)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBlog provides a mock function with given fields: c, blogID
func (_m *BlogRepository) DeleteBlog(c context.Context, blogID string) error {
	ret := _m.Called(c, blogID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBlog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, blogID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRating provides a mock function with given fields: _a0, _a1
func (_m *BlogRepository) DeleteRating(_a0 context.Context, _a1 *domain.BlogRating) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRating")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.BlogRating) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterBlogs provides a mock function with given fields: _a0, _a1
func (_m *BlogRepository) FilterBlogs(_a0 context.Context, _a1 *domain.BlogFilterRequest) ([]*domain.Blog, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FilterBlogs")
	}

	var r0 []*domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.BlogFilterRequest) ([]*domain.Blog, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.BlogFilterRequest) []*domain.Blog); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.BlogFilterRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllBlog provides a mock function with given fields: c, skip, limit, sortBy
func (_m *BlogRepository) GetAllBlog(c context.Context, skip int64, limit int64, sortBy string) ([]*domain.Blog, *domain.PaginationMetadata, error) {
	ret := _m.Called(c, skip, limit, sortBy)

	if len(ret) == 0 {
		panic("no return value specified for GetAllBlog")
	}

	var r0 []*domain.Blog
	var r1 *domain.PaginationMetadata
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string) ([]*domain.Blog, *domain.PaginationMetadata, error)); ok {
		return rf(c, skip, limit, sortBy)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string) []*domain.Blog); ok {
		r0 = rf(c, skip, limit, sortBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, string) *domain.PaginationMetadata); ok {
		r1 = rf(c, skip, limit, sortBy)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.PaginationMetadata)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64, int64, string) error); ok {
		r2 = rf(c, skip, limit, sortBy)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetBlogByID provides a mock function with given fields: c, blogID
func (_m *BlogRepository) GetBlogByID(c context.Context, blogID string) (*domain.Blog, error) {
	ret := _m.Called(c, blogID)

	if len(ret) == 0 {
		panic("no return value specified for GetBlogByID")
	}

	var r0 *domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Blog, error)); ok {
		return rf(c, blogID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Blog); ok {
		r0 = rf(c, blogID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, blogID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementViewCount provides a mock function with given fields: c, blogID
func (_m *BlogRepository) IncrementViewCount(c context.Context, blogID string) (*domain.Blog, error) {
	ret := _m.Called(c, blogID)

	if len(ret) == 0 {
		panic("no return value specified for IncrementViewCount")
	}

	var r0 *domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Blog, error)); ok {
		return rf(c, blogID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Blog); ok {
		r0 = rf(c, blogID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, blogID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertRating provides a mock function with given fields: _a0, _a1
func (_m *BlogRepository) InsertRating(_a0 context.Context, _a1 *domain.BlogRating) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for InsertRating")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.BlogRating) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchBlogs provides a mock function with given fields: _a0, _a1
func (_m *BlogRepository) SearchBlogs(_a0 context.Context, _a1 *domain.BlogSearchRequest) ([]*domain.Blog, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SearchBlogs")
	}

	var r0 []*domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.BlogSearchRequest) ([]*domain.Blog, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.BlogSearchRequest) []*domain.Blog); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.BlogSearchRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBlog provides a mock function with given fields: c, blog, blogID
func (_m *BlogRepository) UpdateBlog(c context.Context, blog *domain.BlogUpdate, blogID string) (*domain.Blog, error) {
	ret := _m.Called(c, blog, blogID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBlog")
	}

	var r0 *domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.BlogUpdate, string) (*domain.Blog, error)); ok {
		return rf(c, blog, blogID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.BlogUpdate, string) *domain.Blog); ok {
		r0 = rf(c, blog, blogID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.BlogUpdate, string) error); ok {
		r1 = rf(c, blog, blogID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCommentCount provides a mock function with given fields: c, blogID, increment
func (_m *BlogRepository) UpdateCommentCount(c context.Context, blogID string, increment bool) error {
	ret := _m.Called(c, blogID, increment)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCommentCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(c, blogID, increment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLikeCount provides a mock function with given fields: c, blogID, increment
func (_m *BlogRepository) UpdateLikeCount(c context.Context, blogID string, increment bool) error {
	ret := _m.Called(c, blogID, increment)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLikeCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(c, blogID, increment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRating provides a mock function with given fields: _a0, _a1, _a2
func (_m *BlogRepository) UpdateRating(_a0 context.Context, _a1 *domain.BlogRating, _a2 int) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRating")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.BlogRating, int) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBlogRepository creates a new instance of BlogRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlogRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlogRepository {
	mock := &BlogRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
