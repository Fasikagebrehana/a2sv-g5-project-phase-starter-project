// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MailServiceInterface is an autogenerated mock type for the MailServiceInterface type
type MailServiceInterface struct {
	mock.Mock
}

// EmailVerificationTemplate provides a mock function with given fields: hostUrl, username, token
func (_m *MailServiceInterface) EmailVerificationTemplate(hostUrl string, username string, token string) string {
	ret := _m.Called(hostUrl, username, token)

	if len(ret) == 0 {
		panic("no return value specified for EmailVerificationTemplate")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(hostUrl, username, token)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PasswordResetTemplate provides a mock function with given fields: token
func (_m *MailServiceInterface) PasswordResetTemplate(token string) string {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for PasswordResetTemplate")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SendMail provides a mock function with given fields: from, to, mailContent
func (_m *MailServiceInterface) SendMail(from string, to string, mailContent string) error {
	ret := _m.Called(from, to, mailContent)

	if len(ret) == 0 {
		panic("no return value specified for SendMail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(from, to, mailContent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMailServiceInterface creates a new instance of MailServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMailServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MailServiceInterface {
	mock := &MailServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
