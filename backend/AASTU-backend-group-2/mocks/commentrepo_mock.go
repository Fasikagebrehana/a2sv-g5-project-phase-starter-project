// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "blog_g2/domain"

	mock "github.com/stretchr/testify/mock"
)

// CommentRepository is an autogenerated mock type for the CommentRepository type
type CommentRepository struct {
	mock.Mock
}

// CreateComment provides a mock function with given fields: BlogID, userID, comment
func (_m *CommentRepository) CreateComment(BlogID string, userID string, comment domain.Comment) error {
	ret := _m.Called(BlogID, userID, comment)

	if len(ret) == 0 {
		panic("no return value specified for CreateComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, domain.Comment) error); ok {
		r0 = rf(BlogID, userID, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteComment provides a mock function with given fields: commentID
func (_m *CommentRepository) DeleteComment(commentID string) error {
	ret := _m.Called(commentID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(commentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetComments provides a mock function with given fields: BlogID
func (_m *CommentRepository) GetComments(BlogID string) ([]domain.Comment, error) {
	ret := _m.Called(BlogID)

	if len(ret) == 0 {
		panic("no return value specified for GetComments")
	}

	var r0 []domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]domain.Comment, error)); ok {
		return rf(BlogID)
	}
	if rf, ok := ret.Get(0).(func(string) []domain.Comment); ok {
		r0 = rf(BlogID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(BlogID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateComment provides a mock function with given fields: commentID, comment
func (_m *CommentRepository) UpdateComment(commentID string, comment domain.Comment) error {
	ret := _m.Called(commentID, comment)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, domain.Comment) error); ok {
		r0 = rf(commentID, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCommentRepository creates a new instance of CommentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommentRepository {
	mock := &CommentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
