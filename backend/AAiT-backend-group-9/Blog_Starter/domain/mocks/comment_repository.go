// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	domain "Blog_Starter/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// CommentRepository is an autogenerated mock type for the CommentRepository type
type CommentRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: c, comment
func (_m *CommentRepository) Create(c context.Context, comment *domain.Comment) (*domain.Comment, error) {
	ret := _m.Called(c, comment)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Comment) (*domain.Comment, error)); ok {
		return rf(c, comment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Comment) *domain.Comment); ok {
		r0 = rf(c, comment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Comment) error); ok {
		r1 = rf(c, comment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: c, commentID
func (_m *CommentRepository) Delete(c context.Context, commentID string) (*domain.Comment, error) {
	ret := _m.Called(c, commentID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Comment, error)); ok {
		return rf(c, commentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Comment); ok {
		r0 = rf(c, commentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, commentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommentByID provides a mock function with given fields: c, commentID
func (_m *CommentRepository) GetCommentByID(c context.Context, commentID string) (*domain.Comment, error) {
	ret := _m.Called(c, commentID)

	if len(ret) == 0 {
		panic("no return value specified for GetCommentByID")
	}

	var r0 *domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Comment, error)); ok {
		return rf(c, commentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Comment); ok {
		r0 = rf(c, commentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, commentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetComments provides a mock function with given fields: c, userID, blogID
func (_m *CommentRepository) GetComments(c context.Context, userID string, blogID string) ([]*domain.Comment, error) {
	ret := _m.Called(c, userID, blogID)

	if len(ret) == 0 {
		panic("no return value specified for GetComments")
	}

	var r0 []*domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*domain.Comment, error)); ok {
		return rf(c, userID, blogID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*domain.Comment); ok {
		r0 = rf(c, userID, blogID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(c, userID, blogID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: c, content, commentID
func (_m *CommentRepository) Update(c context.Context, content string, commentID string) (*domain.Comment, error) {
	ret := _m.Called(c, content, commentID)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*domain.Comment, error)); ok {
		return rf(c, content, commentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.Comment); ok {
		r0 = rf(c, content, commentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(c, content, commentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCommentRepository creates a new instance of CommentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommentRepository {
	mock := &CommentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
