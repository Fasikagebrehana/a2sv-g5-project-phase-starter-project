// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "blogs/Domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ActiveUserRepository is an autogenerated mock type for the ActiveUserRepository type
type ActiveUserRepository struct {
	mock.Mock
}

// CreateActiveUser provides a mock function with given fields: au, c
func (_m *ActiveUserRepository) CreateActiveUser(au domain.ActiveUser, c context.Context) error {
	ret := _m.Called(au, c)

	if len(ret) == 0 {
		panic("no return value specified for CreateActiveUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.ActiveUser, context.Context) error); ok {
		r0 = rf(au, c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteActiveUser provides a mock function with given fields: id, user_agent, c
func (_m *ActiveUserRepository) DeleteActiveUser(id string, user_agent string, c context.Context) error {
	ret := _m.Called(id, user_agent, c)

	if len(ret) == 0 {
		panic("no return value specified for DeleteActiveUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, context.Context) error); ok {
		r0 = rf(id, user_agent, c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindActiveUser provides a mock function with given fields: id, user_agent, c
func (_m *ActiveUserRepository) FindActiveUser(id string, user_agent string, c context.Context) (domain.ActiveUser, error) {
	ret := _m.Called(id, user_agent, c)

	if len(ret) == 0 {
		panic("no return value specified for FindActiveUser")
	}

	var r0 domain.ActiveUser
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, context.Context) (domain.ActiveUser, error)); ok {
		return rf(id, user_agent, c)
	}
	if rf, ok := ret.Get(0).(func(string, string, context.Context) domain.ActiveUser); ok {
		r0 = rf(id, user_agent, c)
	} else {
		r0 = ret.Get(0).(domain.ActiveUser)
	}

	if rf, ok := ret.Get(1).(func(string, string, context.Context) error); ok {
		r1 = rf(id, user_agent, c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewActiveUserRepository creates a new instance of ActiveUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewActiveUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ActiveUserRepository {
	mock := &ActiveUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
