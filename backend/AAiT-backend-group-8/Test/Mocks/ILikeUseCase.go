// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	Domain "AAiT-backend-group-8/Domain"

	mock "github.com/stretchr/testify/mock"
)

// ILikeUseCase is an autogenerated mock type for the ILikeUseCase type
type ILikeUseCase struct {
	mock.Mock
}

// DeleteLikesOfBlog provides a mock function with given fields: blogID
func (_m *ILikeUseCase) DeleteLikesOfBlog(blogID string) error {
	ret := _m.Called(blogID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLikesOfBlog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(blogID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLikes provides a mock function with given fields: blogID
func (_m *ILikeUseCase) GetLikes(blogID string) ([]Domain.Like, error) {
	ret := _m.Called(blogID)

	if len(ret) == 0 {
		panic("no return value specified for GetLikes")
	}

	var r0 []Domain.Like
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]Domain.Like, error)); ok {
		return rf(blogID)
	}
	if rf, ok := ret.Get(0).(func(string) []Domain.Like); ok {
		r0 = rf(blogID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Domain.Like)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(blogID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LikeComment provides a mock function with given fields: userID, blogID
func (_m *ILikeUseCase) LikeComment(userID string, blogID string) (bool, error) {
	ret := _m.Called(userID, blogID)

	if len(ret) == 0 {
		panic("no return value specified for LikeComment")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(userID, blogID)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(userID, blogID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userID, blogID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewILikeUseCase creates a new instance of ILikeUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewILikeUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ILikeUseCase {
	mock := &ILikeUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
