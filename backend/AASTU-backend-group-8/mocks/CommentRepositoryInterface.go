// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "meleket/domain"

	mock "github.com/stretchr/testify/mock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// CommentRepositoryInterface is an autogenerated mock type for the CommentRepositoryInterface type
type CommentRepositoryInterface struct {
	mock.Mock
}

// AddComment provides a mock function with given fields: comment
func (_m *CommentRepositoryInterface) AddComment(comment *domain.Comment) error {
	ret := _m.Called(comment)

	if len(ret) == 0 {
		panic("no return value specified for AddComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Comment) error); ok {
		r0 = rf(comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteComment provides a mock function with given fields: commentID
func (_m *CommentRepositoryInterface) DeleteComment(commentID primitive.ObjectID) error {
	ret := _m.Called(commentID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) error); ok {
		r0 = rf(commentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCommentsByBlogID provides a mock function with given fields: blogID
func (_m *CommentRepositoryInterface) GetCommentsByBlogID(blogID primitive.ObjectID) ([]domain.Comment, error) {
	ret := _m.Called(blogID)

	if len(ret) == 0 {
		panic("no return value specified for GetCommentsByBlogID")
	}

	var r0 []domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) ([]domain.Comment, error)); ok {
		return rf(blogID)
	}
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) []domain.Comment); ok {
		r0 = rf(blogID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(blogID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateComment provides a mock function with given fields: commentID, content
func (_m *CommentRepositoryInterface) UpdateComment(commentID primitive.ObjectID, content string) error {
	ret := _m.Called(commentID, content)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, string) error); ok {
		r0 = rf(commentID, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCommentRepositoryInterface creates a new instance of CommentRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommentRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommentRepositoryInterface {
	mock := &CommentRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
