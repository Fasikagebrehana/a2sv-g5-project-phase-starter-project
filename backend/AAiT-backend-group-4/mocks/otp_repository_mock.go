// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "aait-backend-group4/Domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// OTPRepository is an autogenerated mock type for the OTPRepository type
type OTPRepository struct {
	mock.Mock
}

// CreateOTP provides a mock function with given fields: c, otp
func (_m *OTPRepository) CreateOTP(c context.Context, otp *domain.UserOTPVerification) error {
	ret := _m.Called(c, otp)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.UserOTPVerification) error); ok {
		r0 = rf(c, otp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteOTPByEmail provides a mock function with given fields: c, email
func (_m *OTPRepository) DeleteOTPByEmail(c context.Context, email string) error {
	ret := _m.Called(c, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOTPByEmail provides a mock function with given fields: c, email
func (_m *OTPRepository) GetOTPByEmail(c context.Context, email string) (domain.UserOTPVerification, error) {
	ret := _m.Called(c, email)

	var r0 domain.UserOTPVerification
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.UserOTPVerification); ok {
		r0 = rf(c, email)
	} else {
		r0 = ret.Get(0).(domain.UserOTPVerification)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOTPRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewOTPRepository creates a new instance of OTPRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOTPRepository(t mockConstructorTestingTNewOTPRepository) *OTPRepository {
	mock := &OTPRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
