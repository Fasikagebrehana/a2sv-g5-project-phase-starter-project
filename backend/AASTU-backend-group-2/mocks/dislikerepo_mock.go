// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "blog_g2/domain"

	mock "github.com/stretchr/testify/mock"
)

// DisLikeRepository is an autogenerated mock type for the DisLikeRepository type
type DisLikeRepository struct {
	mock.Mock
}

// CreateDisLike provides a mock function with given fields: user_id, post_id
func (_m *DisLikeRepository) CreateDisLike(user_id string, post_id string) error {
	ret := _m.Called(user_id, post_id)

	if len(ret) == 0 {
		panic("no return value specified for CreateDisLike")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(user_id, post_id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDisLike provides a mock function with given fields: like_id
func (_m *DisLikeRepository) DeleteDisLike(like_id string) error {
	ret := _m.Called(like_id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDisLike")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(like_id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDisLikes provides a mock function with given fields: post_id
func (_m *DisLikeRepository) GetDisLikes(post_id string) ([]domain.DisLike, error) {
	ret := _m.Called(post_id)

	if len(ret) == 0 {
		panic("no return value specified for GetDisLikes")
	}

	var r0 []domain.DisLike
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]domain.DisLike, error)); ok {
		return rf(post_id)
	}
	if rf, ok := ret.Get(0).(func(string) []domain.DisLike); ok {
		r0 = rf(post_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.DisLike)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(post_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDisLikeRepository creates a new instance of DisLikeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDisLikeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *DisLikeRepository {
	mock := &DisLikeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
