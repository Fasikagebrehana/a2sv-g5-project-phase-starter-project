// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// LikeUsecase is an autogenerated mock type for the LikeUsecase type
type LikeUsecase struct {
	mock.Mock
}

// DisLikeBlog provides a mock function with given fields: userID, blogID, Type
func (_m *LikeUsecase) DisLikeBlog(userID string, blogID string, Type string) error {
	ret := _m.Called(userID, blogID, Type)

	if len(ret) == 0 {
		panic("no return value specified for DisLikeBlog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(userID, blogID, Type)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LikeBlog provides a mock function with given fields: userID, blogID, Type
func (_m *LikeUsecase) LikeBlog(userID string, blogID string, Type string) error {
	ret := _m.Called(userID, blogID, Type)

	if len(ret) == 0 {
		panic("no return value specified for LikeBlog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(userID, blogID, Type)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewLikeUsecase creates a new instance of LikeUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLikeUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *LikeUsecase {
	mock := &LikeUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
