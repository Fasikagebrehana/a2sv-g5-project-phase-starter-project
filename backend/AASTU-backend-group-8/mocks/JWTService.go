// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	infrastructure "meleket/infrastructure"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// JWTService is an autogenerated mock type for the JWTService type
type JWTService struct {
	mock.Mock
}

// GenerateRefreshToken provides a mock function with given fields: userID, role
func (_m *JWTService) GenerateRefreshToken(userID primitive.ObjectID, role string) (string, error) {
	ret := _m.Called(userID, role)

	if len(ret) == 0 {
		panic("no return value specified for GenerateRefreshToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, string) (string, error)); ok {
		return rf(userID, role)
	}
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, string) string); ok {
		r0 = rf(userID, role)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(primitive.ObjectID, string) error); ok {
		r1 = rf(userID, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateToken provides a mock function with given fields: userID, role
func (_m *JWTService) GenerateToken(userID primitive.ObjectID, role string) (string, error) {
	ret := _m.Called(userID, role)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, string) (string, error)); ok {
		return rf(userID, role)
	}
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, string) string); ok {
		r0 = rf(userID, role)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(primitive.ObjectID, string) error); ok {
		r1 = rf(userID, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateRefreshToken provides a mock function with given fields: token
func (_m *JWTService) ValidateRefreshToken(token string) (*infrastructure.Claims, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateRefreshToken")
	}

	var r0 *infrastructure.Claims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*infrastructure.Claims, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *infrastructure.Claims); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrastructure.Claims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateToken provides a mock function with given fields: token
func (_m *JWTService) ValidateToken(token string) (*infrastructure.Claims, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 *infrastructure.Claims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*infrastructure.Claims, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *infrastructure.Claims); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*infrastructure.Claims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewJWTService creates a new instance of JWTService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJWTService(t interface {
	mock.TestingT
	Cleanup(func())
}) *JWTService {
	mock := &JWTService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
