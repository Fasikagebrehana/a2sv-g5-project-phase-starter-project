// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	domain "aait.backend.g10/domain"
	dto "aait.backend.g10/usecases/dto"

	mock "github.com/stretchr/testify/mock"
)

// IAuthUsecase is an autogenerated mock type for the IAuthUsecase type
type IAuthUsecase struct {
	mock.Mock
}

// ForgotPassword provides a mock function with given fields: _a0
func (_m *IAuthUsecase) ForgotPassword(_a0 *dto.ForgotPasswordRequestDTO) *domain.CustomError {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ForgotPassword")
	}

	var r0 *domain.CustomError
	if rf, ok := ret.Get(0).(func(*dto.ForgotPasswordRequestDTO) *domain.CustomError); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CustomError)
		}
	}

	return r0
}

// HandleGoogleCallback provides a mock function with given fields: userDto
func (_m *IAuthUsecase) HandleGoogleCallback(userDto *domain.User) (string, string, error) {
	ret := _m.Called(userDto)

	if len(ret) == 0 {
		panic("no return value specified for HandleGoogleCallback")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(*domain.User) (string, string, error)); ok {
		return rf(userDto)
	}
	if rf, ok := ret.Get(0).(func(*domain.User) string); ok {
		r0 = rf(userDto)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*domain.User) string); ok {
		r1 = rf(userDto)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(*domain.User) error); ok {
		r2 = rf(userDto)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LoginUser provides a mock function with given fields: _a0
func (_m *IAuthUsecase) LoginUser(_a0 *dto.LoginUserDTO) (*dto.TokenResponseDTO, *domain.CustomError) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 *dto.TokenResponseDTO
	var r1 *domain.CustomError
	if rf, ok := ret.Get(0).(func(*dto.LoginUserDTO) (*dto.TokenResponseDTO, *domain.CustomError)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*dto.LoginUserDTO) *dto.TokenResponseDTO); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TokenResponseDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(*dto.LoginUserDTO) *domain.CustomError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.CustomError)
		}
	}

	return r0, r1
}

// RefreshTokens provides a mock function with given fields: refreshToken
func (_m *IAuthUsecase) RefreshTokens(refreshToken string) (*dto.TokenResponseDTO, *domain.CustomError) {
	ret := _m.Called(refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for RefreshTokens")
	}

	var r0 *dto.TokenResponseDTO
	var r1 *domain.CustomError
	if rf, ok := ret.Get(0).(func(string) (*dto.TokenResponseDTO, *domain.CustomError)); ok {
		return rf(refreshToken)
	}
	if rf, ok := ret.Get(0).(func(string) *dto.TokenResponseDTO); ok {
		r0 = rf(refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TokenResponseDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *domain.CustomError); ok {
		r1 = rf(refreshToken)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.CustomError)
		}
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: User
func (_m *IAuthUsecase) RegisterUser(User *dto.RegisterUserDTO) (interface{}, *domain.CustomError) {
	ret := _m.Called(User)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 interface{}
	var r1 *domain.CustomError
	if rf, ok := ret.Get(0).(func(*dto.RegisterUserDTO) (interface{}, *domain.CustomError)); ok {
		return rf(User)
	}
	if rf, ok := ret.Get(0).(func(*dto.RegisterUserDTO) interface{}); ok {
		r0 = rf(User)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*dto.RegisterUserDTO) *domain.CustomError); ok {
		r1 = rf(User)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.CustomError)
		}
	}

	return r0, r1
}

// ResetPassword provides a mock function with given fields: _a0
func (_m *IAuthUsecase) ResetPassword(_a0 *dto.ResetPasswordRequestDTO) *domain.CustomError {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 *domain.CustomError
	if rf, ok := ret.Get(0).(func(*dto.ResetPasswordRequestDTO) *domain.CustomError); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CustomError)
		}
	}

	return r0
}

// NewIAuthUsecase creates a new instance of IAuthUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAuthUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAuthUsecase {
	mock := &IAuthUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
