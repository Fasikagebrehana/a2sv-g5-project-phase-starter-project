// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	domain "aait.backend.g10/domain"
	dto "aait.backend.g10/usecases/dto"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// IBlogUseCase is an autogenerated mock type for the IBlogUseCase type
type IBlogUseCase struct {
	mock.Mock
}

// AddView provides a mock function with given fields: id
func (_m *IBlogUseCase) AddView(id uuid.UUID) *domain.CustomError {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for AddView")
	}

	var r0 *domain.CustomError
	if rf, ok := ret.Get(0).(func(uuid.UUID) *domain.CustomError); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CustomError)
		}
	}

	return r0
}

// CreateBlog provides a mock function with given fields: blog
func (_m *IBlogUseCase) CreateBlog(blog *domain.Blog) (*dto.BlogDto, *domain.CustomError) {
	ret := _m.Called(blog)

	if len(ret) == 0 {
		panic("no return value specified for CreateBlog")
	}

	var r0 *dto.BlogDto
	var r1 *domain.CustomError
	if rf, ok := ret.Get(0).(func(*domain.Blog) (*dto.BlogDto, *domain.CustomError)); ok {
		return rf(blog)
	}
	if rf, ok := ret.Get(0).(func(*domain.Blog) *dto.BlogDto); ok {
		r0 = rf(blog)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.BlogDto)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Blog) *domain.CustomError); ok {
		r1 = rf(blog)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.CustomError)
		}
	}

	return r0, r1
}

// DeleteBlog provides a mock function with given fields: id, requester_id, is_admin
func (_m *IBlogUseCase) DeleteBlog(id uuid.UUID, requester_id uuid.UUID, is_admin bool) *domain.CustomError {
	ret := _m.Called(id, requester_id, is_admin)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBlog")
	}

	var r0 *domain.CustomError
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, bool) *domain.CustomError); ok {
		r0 = rf(id, requester_id, is_admin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CustomError)
		}
	}

	return r0
}

// GenerateBlogContent provides a mock function with given fields: req
func (_m *IBlogUseCase) GenerateBlogContent(req domain.BlogContentRequest) (*domain.BlogContentResponse, *domain.CustomError) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for GenerateBlogContent")
	}

	var r0 *domain.BlogContentResponse
	var r1 *domain.CustomError
	if rf, ok := ret.Get(0).(func(domain.BlogContentRequest) (*domain.BlogContentResponse, *domain.CustomError)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(domain.BlogContentRequest) *domain.BlogContentResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.BlogContentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.BlogContentRequest) *domain.CustomError); ok {
		r1 = rf(req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.CustomError)
		}
	}

	return r0, r1
}

// GetAllBlogs provides a mock function with given fields:
func (_m *IBlogUseCase) GetAllBlogs() ([]*dto.BlogDto, *domain.CustomError) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllBlogs")
	}

	var r0 []*dto.BlogDto
	var r1 *domain.CustomError
	if rf, ok := ret.Get(0).(func() ([]*dto.BlogDto, *domain.CustomError)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*dto.BlogDto); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.BlogDto)
		}
	}

	if rf, ok := ret.Get(1).(func() *domain.CustomError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.CustomError)
		}
	}

	return r0, r1
}

// GetBlogByID provides a mock function with given fields: id
func (_m *IBlogUseCase) GetBlogByID(id uuid.UUID) (*dto.BlogDto, *domain.CustomError) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetBlogByID")
	}

	var r0 *dto.BlogDto
	var r1 *domain.CustomError
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*dto.BlogDto, *domain.CustomError)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *dto.BlogDto); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.BlogDto)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) *domain.CustomError); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.CustomError)
		}
	}

	return r0, r1
}

// SearchBlogs provides a mock function with given fields: filter
func (_m *IBlogUseCase) SearchBlogs(filter domain.BlogFilter) ([]dto.BlogDto, int, int, *domain.CustomError) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for SearchBlogs")
	}

	var r0 []dto.BlogDto
	var r1 int
	var r2 int
	var r3 *domain.CustomError
	if rf, ok := ret.Get(0).(func(domain.BlogFilter) ([]dto.BlogDto, int, int, *domain.CustomError)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(domain.BlogFilter) []dto.BlogDto); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.BlogDto)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.BlogFilter) int); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(domain.BlogFilter) int); ok {
		r2 = rf(filter)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func(domain.BlogFilter) *domain.CustomError); ok {
		r3 = rf(filter)
	} else {
		if ret.Get(3) != nil {
			r3 = ret.Get(3).(*domain.CustomError)
		}
	}

	return r0, r1, r2, r3
}

// SuggestImprovements provides a mock function with given fields: content
func (_m *IBlogUseCase) SuggestImprovements(content string) (*domain.SuggestionResponse, *domain.CustomError) {
	ret := _m.Called(content)

	if len(ret) == 0 {
		panic("no return value specified for SuggestImprovements")
	}

	var r0 *domain.SuggestionResponse
	var r1 *domain.CustomError
	if rf, ok := ret.Get(0).(func(string) (*domain.SuggestionResponse, *domain.CustomError)); ok {
		return rf(content)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.SuggestionResponse); ok {
		r0 = rf(content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.SuggestionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *domain.CustomError); ok {
		r1 = rf(content)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.CustomError)
		}
	}

	return r0, r1
}

// UpdateBlog provides a mock function with given fields: blog
func (_m *IBlogUseCase) UpdateBlog(blog *domain.Blog) *domain.CustomError {
	ret := _m.Called(blog)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBlog")
	}

	var r0 *domain.CustomError
	if rf, ok := ret.Get(0).(func(*domain.Blog) *domain.CustomError); ok {
		r0 = rf(blog)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CustomError)
		}
	}

	return r0
}

// NewIBlogUseCase creates a new instance of IBlogUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIBlogUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IBlogUseCase {
	mock := &IBlogUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
