// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "blog/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// SignupUsecase is an autogenerated mock type for the SignupUsecase type
type SignupUsecase struct {
	mock.Mock
}

// CreateAccessToken provides a mock function with given fields: user, secret, expiry
func (_m *SignupUsecase) CreateAccessToken(user *domain.AuthSignup, secret string, expiry int) (string, error) {
	ret := _m.Called(user, secret, expiry)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.AuthSignup, string, int) (string, error)); ok {
		return rf(user, secret, expiry)
	}
	if rf, ok := ret.Get(0).(func(*domain.AuthSignup, string, int) string); ok {
		r0 = rf(user, secret, expiry)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*domain.AuthSignup, string, int) error); ok {
		r1 = rf(user, secret, expiry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRefreshToken provides a mock function with given fields: user, secret, expiry
func (_m *SignupUsecase) CreateRefreshToken(user *domain.AuthSignup, secret string, expiry int) (string, error) {
	ret := _m.Called(user, secret, expiry)

	if len(ret) == 0 {
		panic("no return value specified for CreateRefreshToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.AuthSignup, string, int) (string, error)); ok {
		return rf(user, secret, expiry)
	}
	if rf, ok := ret.Get(0).(func(*domain.AuthSignup, string, int) string); ok {
		r0 = rf(user, secret, expiry)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*domain.AuthSignup, string, int) error); ok {
		r1 = rf(user, secret, expiry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: c, email
func (_m *SignupUsecase) GetUserByEmail(c context.Context, email string) (*domain.User, error) {
	ret := _m.Called(c, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return rf(c, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = rf(c, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: c, username
func (_m *SignupUsecase) GetUserByUsername(c context.Context, username string) (*domain.User, error) {
	ret := _m.Called(c, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return rf(c, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = rf(c, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: c, user
func (_m *SignupUsecase) RegisterUser(c context.Context, user *domain.AuthSignup) (*primitive.ObjectID, error) {
	ret := _m.Called(c, user)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 *primitive.ObjectID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.AuthSignup) (*primitive.ObjectID, error)); ok {
		return rf(c, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.AuthSignup) *primitive.ObjectID); ok {
		r0 = rf(c, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*primitive.ObjectID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.AuthSignup) error); ok {
		r1 = rf(c, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveRefreshToken provides a mock function with given fields: c, token, id
func (_m *SignupUsecase) SaveRefreshToken(c context.Context, token string, id primitive.ObjectID) error {
	ret := _m.Called(c, token, id)

	if len(ret) == 0 {
		panic("no return value specified for SaveRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, primitive.ObjectID) error); ok {
		r0 = rf(c, token, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendOTP provides a mock function with given fields: c, user, username, password
func (_m *SignupUsecase) SendOTP(c context.Context, user *domain.AuthSignup, username string, password string) error {
	ret := _m.Called(c, user, username, password)

	if len(ret) == 0 {
		panic("no return value specified for SendOTP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.AuthSignup, string, string) error); ok {
		r0 = rf(c, user, username, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyOTP provides a mock function with given fields: c, otp
func (_m *SignupUsecase) VerifyOTP(c context.Context, otp *domain.OTPRequest) (*domain.OTP, error) {
	ret := _m.Called(c, otp)

	if len(ret) == 0 {
		panic("no return value specified for VerifyOTP")
	}

	var r0 *domain.OTP
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.OTPRequest) (*domain.OTP, error)); ok {
		return rf(c, otp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.OTPRequest) *domain.OTP); ok {
		r0 = rf(c, otp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.OTP)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.OTPRequest) error); ok {
		r1 = rf(c, otp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSignupUsecase creates a new instance of SignupUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSignupUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *SignupUsecase {
	mock := &SignupUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
