// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	Domain "AAiT-backend-group-8/Domain"

	mock "github.com/stretchr/testify/mock"
)

// IBlogUseCase is an autogenerated mock type for the IBlogUseCase type
type IBlogUseCase struct {
	mock.Mock
}

// CreateBlog provides a mock function with given fields: blog
func (_m *IBlogUseCase) CreateBlog(blog *Domain.Blog) error {
	ret := _m.Called(blog)

	if len(ret) == 0 {
		panic("no return value specified for CreateBlog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*Domain.Blog) error); ok {
		r0 = rf(blog)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBlog provides a mock function with given fields: ID
func (_m *IBlogUseCase) DeleteBlog(ID string) error {
	ret := _m.Called(ID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBlog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllBlogs provides a mock function with given fields: page, pageSize, sortBy
func (_m *IBlogUseCase) GetAllBlogs(page int, pageSize int, sortBy string) ([]Domain.Blog, error) {
	ret := _m.Called(page, pageSize, sortBy)

	if len(ret) == 0 {
		panic("no return value specified for GetAllBlogs")
	}

	var r0 []Domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]Domain.Blog, error)); ok {
		return rf(page, pageSize, sortBy)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []Domain.Blog); ok {
		r0 = rf(page, pageSize, sortBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Domain.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) error); ok {
		r1 = rf(page, pageSize, sortBy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlogByID provides a mock function with given fields: ID
func (_m *IBlogUseCase) GetBlogByID(ID string) (*Domain.Blog, error) {
	ret := _m.Called(ID)

	if len(ret) == 0 {
		panic("no return value specified for GetBlogByID")
	}

	var r0 *Domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*Domain.Blog, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(string) *Domain.Blog); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Domain.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchBlog provides a mock function with given fields: criteria
func (_m *IBlogUseCase) SearchBlog(criteria *Domain.SearchCriteria) ([]Domain.Blog, error) {
	ret := _m.Called(criteria)

	if len(ret) == 0 {
		panic("no return value specified for SearchBlog")
	}

	var r0 []Domain.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(*Domain.SearchCriteria) ([]Domain.Blog, error)); ok {
		return rf(criteria)
	}
	if rf, ok := ret.Get(0).(func(*Domain.SearchCriteria) []Domain.Blog); ok {
		r0 = rf(criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Domain.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(*Domain.SearchCriteria) error); ok {
		r1 = rf(criteria)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBlog provides a mock function with given fields: blog
func (_m *IBlogUseCase) UpdateBlog(blog *Domain.Blog) error {
	ret := _m.Called(blog)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBlog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*Domain.Blog) error); ok {
		r0 = rf(blog)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBlogCommentCount provides a mock function with given fields: id, inc
func (_m *IBlogUseCase) UpdateBlogCommentCount(id string, inc bool) error {
	ret := _m.Called(id, inc)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBlogCommentCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(id, inc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBlogLikeCount provides a mock function with given fields: id, inc
func (_m *IBlogUseCase) UpdateBlogLikeCount(id string, inc bool) error {
	ret := _m.Called(id, inc)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBlogLikeCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(id, inc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBlogViewCount provides a mock function with given fields: id
func (_m *IBlogUseCase) UpdateBlogViewCount(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBlogViewCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIBlogUseCase creates a new instance of IBlogUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIBlogUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IBlogUseCase {
	mock := &IBlogUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
