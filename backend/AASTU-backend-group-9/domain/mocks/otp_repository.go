// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "blog/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// OTPRepository is an autogenerated mock type for the OTPRepository type
type OTPRepository struct {
	mock.Mock
}

// DeleteOTP provides a mock function with given fields: c, email
func (_m *OTPRepository) DeleteOTP(c context.Context, email string) error {
	ret := _m.Called(c, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOTPByEmail provides a mock function with given fields: ctx, email
func (_m *OTPRepository) GetOTPByEmail(ctx context.Context, email string) (*domain.OTP, error) {
	ret := _m.Called(ctx, email)

	var r0 *domain.OTP
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.OTP); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.OTP)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveOTP provides a mock function with given fields: c, otp
func (_m *OTPRepository) SaveOTP(c context.Context, otp *domain.OTP) error {
	ret := _m.Called(c, otp)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.OTP) error); ok {
		r0 = rf(c, otp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewOTPRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewOTPRepository creates a new instance of OTPRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOTPRepository(t mockConstructorTestingTNewOTPRepository) *OTPRepository {
	mock := &OTPRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
