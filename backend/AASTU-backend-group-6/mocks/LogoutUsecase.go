// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "blogs/Domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// LogoutUsecase is an autogenerated mock type for the LogoutUsecase type
type LogoutUsecase struct {
	mock.Mock
}

// CheckActiveUser provides a mock function with given fields: c, id, user_agent
func (_m *LogoutUsecase) CheckActiveUser(c context.Context, id string, user_agent string) (domain.ActiveUser, error) {
	ret := _m.Called(c, id, user_agent)

	if len(ret) == 0 {
		panic("no return value specified for CheckActiveUser")
	}

	var r0 domain.ActiveUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (domain.ActiveUser, error)); ok {
		return rf(c, id, user_agent)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) domain.ActiveUser); ok {
		r0 = rf(c, id, user_agent)
	} else {
		r0 = ret.Get(0).(domain.ActiveUser)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(c, id, user_agent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: c, id, user_agent
func (_m *LogoutUsecase) Logout(c context.Context, id string, user_agent string) error {
	ret := _m.Called(c, id, user_agent)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(c, id, user_agent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewLogoutUsecase creates a new instance of LogoutUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogoutUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *LogoutUsecase {
	mock := &LogoutUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
