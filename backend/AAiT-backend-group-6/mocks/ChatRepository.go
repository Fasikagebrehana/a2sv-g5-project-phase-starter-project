// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	domain "AAiT-backend-group-6/domain"

	mock "github.com/stretchr/testify/mock"
)

// ChatRepository is an autogenerated mock type for the ChatRepository type
type ChatRepository struct {
	mock.Mock
}

// CreateChat provides a mock function with given fields: chat
func (_m *ChatRepository) CreateChat(chat *domain.ChatContext) (*domain.ChatContext, error) {
	ret := _m.Called(chat)

	var r0 *domain.ChatContext
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.ChatContext) (*domain.ChatContext, error)); ok {
		return rf(chat)
	}
	if rf, ok := ret.Get(0).(func(*domain.ChatContext) *domain.ChatContext); ok {
		r0 = rf(chat)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ChatContext)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.ChatContext) error); ok {
		r1 = rf(chat)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteChat provides a mock function with given fields: id
func (_m *ChatRepository) DeleteChat(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetChat provides a mock function with given fields: id
func (_m *ChatRepository) GetChat(id string) (*domain.ChatContext, error) {
	ret := _m.Called(id)

	var r0 *domain.ChatContext
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.ChatContext, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.ChatContext); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ChatContext)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChats provides a mock function with given fields:
func (_m *ChatRepository) GetChats() ([]*domain.ChatContext, error) {
	ret := _m.Called()

	var r0 []*domain.ChatContext
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*domain.ChatContext, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*domain.ChatContext); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.ChatContext)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateChat provides a mock function with given fields: messages, id
func (_m *ChatRepository) UpdateChat(messages []domain.ChatMessage, id string) (*domain.ChatContext, error) {
	ret := _m.Called(messages, id)

	var r0 *domain.ChatContext
	var r1 error
	if rf, ok := ret.Get(0).(func([]domain.ChatMessage, string) (*domain.ChatContext, error)); ok {
		return rf(messages, id)
	}
	if rf, ok := ret.Get(0).(func([]domain.ChatMessage, string) *domain.ChatContext); ok {
		r0 = rf(messages, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ChatContext)
		}
	}

	if rf, ok := ret.Get(1).(func([]domain.ChatMessage, string) error); ok {
		r1 = rf(messages, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewChatRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewChatRepository creates a new instance of ChatRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChatRepository(t mockConstructorTestingTNewChatRepository) *ChatRepository {
	mock := &ChatRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
