// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "blogs/Domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// RefreshTokenUsecase is an autogenerated mock type for the RefreshTokenUsecase type
type RefreshTokenUsecase struct {
	mock.Mock
}

// CheckActiveUser provides a mock function with given fields: c, id, user_agent
func (_m *RefreshTokenUsecase) CheckActiveUser(c context.Context, id string, user_agent string) (domain.ActiveUser, error) {
	ret := _m.Called(c, id, user_agent)

	if len(ret) == 0 {
		panic("no return value specified for CheckActiveUser")
	}

	var r0 domain.ActiveUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (domain.ActiveUser, error)); ok {
		return rf(c, id, user_agent)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) domain.ActiveUser); ok {
		r0 = rf(c, id, user_agent)
	} else {
		r0 = ret.Get(0).(domain.ActiveUser)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(c, id, user_agent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccessToken provides a mock function with given fields: user, secret, expiry
func (_m *RefreshTokenUsecase) CreateAccessToken(user *domain.User, secret string, expiry int) (string, error) {
	ret := _m.Called(user, secret, expiry)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.User, string, int) (string, error)); ok {
		return rf(user, secret, expiry)
	}
	if rf, ok := ret.Get(0).(func(*domain.User, string, int) string); ok {
		r0 = rf(user, secret, expiry)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*domain.User, string, int) error); ok {
		r1 = rf(user, secret, expiry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRefreshToken provides a mock function with given fields: user, secret, expiry
func (_m *RefreshTokenUsecase) CreateRefreshToken(user *domain.User, secret string, expiry int) (string, error) {
	ret := _m.Called(user, secret, expiry)

	if len(ret) == 0 {
		panic("no return value specified for CreateRefreshToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.User, string, int) (string, error)); ok {
		return rf(user, secret, expiry)
	}
	if rf, ok := ret.Get(0).(func(*domain.User, string, int) string); ok {
		r0 = rf(user, secret, expiry)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*domain.User, string, int) error); ok {
		r1 = rf(user, secret, expiry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExtractIDFromToken provides a mock function with given fields: requestToken, secret
func (_m *RefreshTokenUsecase) ExtractIDFromToken(requestToken string, secret string) (string, error) {
	ret := _m.Called(requestToken, secret)

	if len(ret) == 0 {
		panic("no return value specified for ExtractIDFromToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(requestToken, secret)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(requestToken, secret)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(requestToken, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: c, id
func (_m *RefreshTokenUsecase) GetUserByID(c context.Context, id string) (domain.User, error) {
	ret := _m.Called(c, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.User, error)); ok {
		return rf(c, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveActiveUser provides a mock function with given fields: c, id, user_agent
func (_m *RefreshTokenUsecase) RemoveActiveUser(c context.Context, id string, user_agent string) error {
	ret := _m.Called(c, id, user_agent)

	if len(ret) == 0 {
		panic("no return value specified for RemoveActiveUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(c, id, user_agent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRefreshTokenUsecase creates a new instance of RefreshTokenUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRefreshTokenUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *RefreshTokenUsecase {
	mock := &RefreshTokenUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
