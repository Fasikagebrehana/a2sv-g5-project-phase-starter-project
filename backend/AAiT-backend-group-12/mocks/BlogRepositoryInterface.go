// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	domain "blog_api/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// BlogRepositoryInterface is an autogenerated mock type for the BlogRepositoryInterface type
type BlogRepositoryInterface struct {
	mock.Mock
}

// CreateComment provides a mock function with given fields: ctx, comment, blogID, createdBy
func (_m *BlogRepositoryInterface) CreateComment(ctx context.Context, comment *domain.Comment, blogID string, createdBy string) domain.CodedError {
	ret := _m.Called(ctx, comment, blogID, createdBy)

	if len(ret) == 0 {
		panic("no return value specified for CreateComment")
	}

	var r0 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Comment, string, string) domain.CodedError); ok {
		r0 = rf(ctx, comment, blogID, createdBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.CodedError)
		}
	}

	return r0
}

// DeleteBlogPost provides a mock function with given fields: ctx, id
func (_m *BlogRepositoryInterface) DeleteBlogPost(ctx context.Context, id string) domain.CodedError {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBlogPost")
	}

	var r0 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.CodedError); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.CodedError)
		}
	}

	return r0
}

// DeleteComment provides a mock function with given fields: ctx, commentID, blogID, userName
func (_m *BlogRepositoryInterface) DeleteComment(ctx context.Context, commentID string, blogID string, userName string) domain.CodedError {
	ret := _m.Called(ctx, commentID, blogID, userName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) domain.CodedError); ok {
		r0 = rf(ctx, commentID, blogID, userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.CodedError)
		}
	}

	return r0
}

// FetchBlogPostByID provides a mock function with given fields: ctx, postID, incrementView
func (_m *BlogRepositoryInterface) FetchBlogPostByID(ctx context.Context, postID string, incrementView bool) (*domain.Blog, domain.CodedError) {
	ret := _m.Called(ctx, postID, incrementView)

	if len(ret) == 0 {
		panic("no return value specified for FetchBlogPostByID")
	}

	var r0 *domain.Blog
	var r1 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) (*domain.Blog, domain.CodedError)); ok {
		return rf(ctx, postID, incrementView)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) *domain.Blog); ok {
		r0 = rf(ctx, postID, incrementView)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) domain.CodedError); ok {
		r1 = rf(ctx, postID, incrementView)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(domain.CodedError)
		}
	}

	return r0, r1
}

// FetchBlogPosts provides a mock function with given fields: ctx, filters
func (_m *BlogRepositoryInterface) FetchBlogPosts(ctx context.Context, filters domain.BlogFilterOptions) ([]domain.Blog, int, domain.CodedError) {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for FetchBlogPosts")
	}

	var r0 []domain.Blog
	var r1 int
	var r2 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, domain.BlogFilterOptions) ([]domain.Blog, int, domain.CodedError)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.BlogFilterOptions) []domain.Blog); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.BlogFilterOptions) int); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, domain.BlogFilterOptions) domain.CodedError); ok {
		r2 = rf(ctx, filters)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(domain.CodedError)
		}
	}

	return r0, r1, r2
}

// InsertBlogPost provides a mock function with given fields: ctx, blog
func (_m *BlogRepositoryInterface) InsertBlogPost(ctx context.Context, blog *domain.Blog) domain.CodedError {
	ret := _m.Called(ctx, blog)

	if len(ret) == 0 {
		panic("no return value specified for InsertBlogPost")
	}

	var r0 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Blog) domain.CodedError); ok {
		r0 = rf(ctx, blog)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.CodedError)
		}
	}

	return r0
}

// TrackBlogPopularity provides a mock function with given fields: ctx, blogId, action, state, username
func (_m *BlogRepositoryInterface) TrackBlogPopularity(ctx context.Context, blogId string, action string, state bool, username string) domain.CodedError {
	ret := _m.Called(ctx, blogId, action, state, username)

	if len(ret) == 0 {
		panic("no return value specified for TrackBlogPopularity")
	}

	var r0 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool, string) domain.CodedError); ok {
		r0 = rf(ctx, blogId, action, state, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.CodedError)
		}
	}

	return r0
}

// UpdateBlogPost provides a mock function with given fields: ctx, id, blog
func (_m *BlogRepositoryInterface) UpdateBlogPost(ctx context.Context, id string, blog *domain.NewBlog) domain.CodedError {
	ret := _m.Called(ctx, id, blog)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBlogPost")
	}

	var r0 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.NewBlog) domain.CodedError); ok {
		r0 = rf(ctx, id, blog)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.CodedError)
		}
	}

	return r0
}

// UpdateComment provides a mock function with given fields: ctx, comment, commentID, blogID, userName
func (_m *BlogRepositoryInterface) UpdateComment(ctx context.Context, comment *domain.NewComment, commentID string, blogID string, userName string) domain.CodedError {
	ret := _m.Called(ctx, comment, commentID, blogID, userName)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComment")
	}

	var r0 domain.CodedError
	if rf, ok := ret.Get(0).(func(context.Context, *domain.NewComment, string, string, string) domain.CodedError); ok {
		r0 = rf(ctx, comment, commentID, blogID, userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.CodedError)
		}
	}

	return r0
}

// NewBlogRepositoryInterface creates a new instance of BlogRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlogRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlogRepositoryInterface {
	mock := &BlogRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
