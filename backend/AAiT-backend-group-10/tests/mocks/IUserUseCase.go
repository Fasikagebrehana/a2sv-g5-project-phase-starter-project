// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	domain "aait.backend.g10/domain"
	dto "aait.backend.g10/usecases/dto"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// IUserUseCase is an autogenerated mock type for the IUserUseCase type
type IUserUseCase struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: user
func (_m *IUserUseCase) CreateUser(user *domain.User) (*domain.User, *domain.CustomError) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *domain.User
	var r1 *domain.CustomError
	if rf, ok := ret.Get(0).(func(*domain.User) (*domain.User, *domain.CustomError)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*domain.User) *domain.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.User) *domain.CustomError); ok {
		r1 = rf(user)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.CustomError)
		}
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: id
func (_m *IUserUseCase) GetUserByID(id uuid.UUID) (*dto.GetUserResponseDto, *domain.CustomError) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *dto.GetUserResponseDto
	var r1 *domain.CustomError
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*dto.GetUserResponseDto, *domain.CustomError)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *dto.GetUserResponseDto); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GetUserResponseDto)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) *domain.CustomError); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.CustomError)
		}
	}

	return r0, r1
}

// PromoteUser provides a mock function with given fields: id, isPromote
func (_m *IUserUseCase) PromoteUser(id uuid.UUID, isPromote bool) *domain.CustomError {
	ret := _m.Called(id, isPromote)

	if len(ret) == 0 {
		panic("no return value specified for PromoteUser")
	}

	var r0 *domain.CustomError
	if rf, ok := ret.Get(0).(func(uuid.UUID, bool) *domain.CustomError); ok {
		r0 = rf(id, isPromote)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CustomError)
		}
	}

	return r0
}

// UpdateUser provides a mock function with given fields: requesterID, user
func (_m *IUserUseCase) UpdateUser(requesterID uuid.UUID, user *dto.UserUpdate) *domain.CustomError {
	ret := _m.Called(requesterID, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *domain.CustomError
	if rf, ok := ret.Get(0).(func(uuid.UUID, *dto.UserUpdate) *domain.CustomError); ok {
		r0 = rf(requesterID, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CustomError)
		}
	}

	return r0
}

// NewIUserUseCase creates a new instance of IUserUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserUseCase {
	mock := &IUserUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
