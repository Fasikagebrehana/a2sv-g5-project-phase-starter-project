// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	domain "blogApp/internal/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// TokenUseCaseInterface is an autogenerated mock type for the TokenUseCaseInterface type
type TokenUseCaseInterface struct {
	mock.Mock
}

// BlacklistToken provides a mock function with given fields: ctx, token, tokenType, expiry
func (_m *TokenUseCaseInterface) BlacklistToken(ctx context.Context, token string, tokenType domain.TokenType, expiry time.Time) error {
	ret := _m.Called(ctx, token, tokenType, expiry)

	if len(ret) == 0 {
		panic("no return value specified for BlacklistToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.TokenType, time.Time) error); ok {
		r0 = rf(ctx, token, tokenType, expiry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsTokenBlacklisted provides a mock function with given fields: ctx, token, tokenType
func (_m *TokenUseCaseInterface) IsTokenBlacklisted(ctx context.Context, token string, tokenType domain.TokenType) (bool, error) {
	ret := _m.Called(ctx, token, tokenType)

	if len(ret) == 0 {
		panic("no return value specified for IsTokenBlacklisted")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.TokenType) (bool, error)); ok {
		return rf(ctx, token, tokenType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.TokenType) bool); ok {
		r0 = rf(ctx, token, tokenType)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.TokenType) error); ok {
		r1 = rf(ctx, token, tokenType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTokenUseCaseInterface creates a new instance of TokenUseCaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenUseCaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenUseCaseInterface {
	mock := &TokenUseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
