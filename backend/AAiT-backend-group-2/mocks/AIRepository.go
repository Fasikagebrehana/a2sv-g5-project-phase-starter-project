// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "AAiT-backend-group-2/Domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// AIRepository is an autogenerated mock type for the AIRepository type
type AIRepository struct {
	mock.Mock
}

// CreateChat provides a mock function with given fields: c, chat
func (_m *AIRepository) CreateChat(c context.Context, chat *domain.ChatContext) error {
	ret := _m.Called(c, chat)

	if len(ret) == 0 {
		panic("no return value specified for CreateChat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ChatContext) error); ok {
		r0 = rf(c, chat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteChat provides a mock function with given fields: c, id
func (_m *AIRepository) DeleteChat(c context.Context, id string) error {
	ret := _m.Called(c, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetChat provides a mock function with given fields: c, id
func (_m *AIRepository) GetChat(c context.Context, id string) (*domain.ChatContext, error) {
	ret := _m.Called(c, id)

	if len(ret) == 0 {
		panic("no return value specified for GetChat")
	}

	var r0 *domain.ChatContext
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.ChatContext, error)); ok {
		return rf(c, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.ChatContext); ok {
		r0 = rf(c, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ChatContext)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChatByUserId provides a mock function with given fields: c, userId
func (_m *AIRepository) GetChatByUserId(c context.Context, userId string) (*domain.ChatContext, error) {
	ret := _m.Called(c, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetChatByUserId")
	}

	var r0 *domain.ChatContext
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.ChatContext, error)); ok {
		return rf(c, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.ChatContext); ok {
		r0 = rf(c, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ChatContext)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateChat provides a mock function with given fields: c, messages, id
func (_m *AIRepository) UpdateChat(c context.Context, messages []domain.ChatMessage, id string) error {
	ret := _m.Called(c, messages, id)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []domain.ChatMessage, string) error); ok {
		r0 = rf(c, messages, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAIRepository creates a new instance of AIRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAIRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AIRepository {
	mock := &AIRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
