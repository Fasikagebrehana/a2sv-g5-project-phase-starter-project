// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "AAiT-backend-group-2/Domain"
	dtos "AAiT-backend-group-2/Infrastructure/dtos"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// ChangePassword provides a mock function with given fields: c, userId, changePasswordDto
func (_m *UserUsecase) ChangePassword(c context.Context, userId string, changePasswordDto *dtos.ChangePasswordDto) error {
	ret := _m.Called(c, userId, changePasswordDto)

	if len(ret) == 0 {
		panic("no return value specified for ChangePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *dtos.ChangePasswordDto) error); ok {
		r0 = rf(c, userId, changePasswordDto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: c, user
func (_m *UserUsecase) CreateUser(c context.Context, user domain.User) error {
	ret := _m.Called(c, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) error); ok {
		r0 = rf(c, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: c, id
func (_m *UserUsecase) DeleteUser(c context.Context, id string) error {
	ret := _m.Called(c, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DemoteAdmin provides a mock function with given fields: c, id
func (_m *UserUsecase) DemoteAdmin(c context.Context, id string) error {
	ret := _m.Called(c, id)

	if len(ret) == 0 {
		panic("no return value specified for DemoteAdmin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ForgotPassword provides a mock function with given fields: c, userId, email
func (_m *UserUsecase) ForgotPassword(c context.Context, userId string, email string) error {
	ret := _m.Called(c, userId, email)

	if len(ret) == 0 {
		panic("no return value specified for ForgotPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(c, userId, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUsers provides a mock function with given fields: c
func (_m *UserUsecase) GetAllUsers(c context.Context) ([]domain.User, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.User, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.User); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: c, id
func (_m *UserUsecase) GetUserByID(c context.Context, id string) (*domain.User, error) {
	ret := _m.Called(c, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return rf(c, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = rf(c, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: c, loginDto
func (_m *UserUsecase) Login(c context.Context, loginDto *dtos.LoginDTO) (map[string]string, error) {
	ret := _m.Called(c, loginDto)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dtos.LoginDTO) (map[string]string, error)); ok {
		return rf(c, loginDto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dtos.LoginDTO) map[string]string); ok {
		r0 = rf(c, loginDto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dtos.LoginDTO) error); ok {
		r1 = rf(c, loginDto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: c, id
func (_m *UserUsecase) Logout(c context.Context, id string) error {
	ret := _m.Called(c, id)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PromoteUser provides a mock function with given fields: c, id
func (_m *UserUsecase) PromoteUser(c context.Context, id string) error {
	ret := _m.Called(c, id)

	if len(ret) == 0 {
		panic("no return value specified for PromoteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshToken provides a mock function with given fields: c, token
func (_m *UserUsecase) RefreshToken(c context.Context, token string) (string, error) {
	ret := _m.Called(c, token)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(c, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(c, token)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPassword provides a mock function with given fields: c, userId, passwordResetDto
func (_m *UserUsecase) ResetPassword(c context.Context, userId string, passwordResetDto *dtos.PasswordResetDto) error {
	ret := _m.Called(c, userId, passwordResetDto)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *dtos.PasswordResetDto) error); ok {
		r0 = rf(c, userId, passwordResetDto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProfile provides a mock function with given fields: c, userId, updateProfileDto
func (_m *UserUsecase) UpdateProfile(c context.Context, userId string, updateProfileDto *dtos.UpdateProfileDto) error {
	ret := _m.Called(c, userId, updateProfileDto)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *dtos.UpdateProfileDto) error); ok {
		r0 = rf(c, userId, updateProfileDto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: c, id, user
func (_m *UserUsecase) UpdateUser(c context.Context, id string, user *domain.User) error {
	ret := _m.Called(c, id, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.User) error); ok {
		r0 = rf(c, id, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
